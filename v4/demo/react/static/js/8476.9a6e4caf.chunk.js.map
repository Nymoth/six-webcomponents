{"version":3,"file":"static/js/8476.9a6e4caf.chunk.js","mappings":"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","sources":["../../../libraries/ui-library/dist/esm/src/utils/event-listeners.ts","../../../libraries/ui-library/dist/esm/src/functional-components/form-control/form-control.tsx","../../../libraries/ui-library/dist/esm/src/components/six-checkbox/six-checkbox.tsx","../../../libraries/ui-library/dist/esm/src/components/six-checkbox/six-checkbox.scss?tag=six-checkbox&encapsulation=shadow","../../../libraries/ui-library/dist/esm/src/utils/slot.ts"],"sourcesContent":["interface EventListener {\n  el: GlobalEventHandlers;\n  name: string;\n  listener: EventListenerOrEventListenerObject;\n  identifier?: string | null;\n}\n\nexport class EventListeners {\n  eventListeners: EventListener[] = [];\n\n  add = <T extends GlobalEventHandlers>(\n    el: T,\n    name: string,\n    listener: EventListenerOrEventListenerObject,\n    identifier: string | null | undefined = null\n  ) => {\n    this.eventListeners.push({ el, name, listener, identifier });\n    el.addEventListener(name, listener);\n  };\n\n  remove = <T extends GlobalEventHandlers>(el: T, name: string, listener: EventListenerOrEventListenerObject) => {\n    this.eventListeners = this.getFilteredEventListeners(\n      (eventListener: EventListener) =>\n        eventListener.listener == listener && eventListener.el === el && eventListener.name === name\n    );\n  };\n\n  removeByIdentifier = (identifier: string) => {\n    const sameItem = (el: EventListener) => el.identifier === identifier;\n    const foundListener = this.eventListeners.find(sameItem) !== undefined;\n    if (!foundListener) {\n      return;\n    }\n    this.eventListeners = this.getFilteredEventListeners(sameItem);\n  };\n\n  private getFilteredEventListeners(sameItem: (el: EventListener) => boolean) {\n    return this.eventListeners.filter((item) => {\n      if (sameItem(item)) {\n        item.el.removeEventListener(item.name, item.listener);\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n\n  removeAll = () => {\n    while (this.eventListeners.length > 0) {\n      const eventListener: EventListener | undefined = this.eventListeners.pop();\n      if (eventListener != null) {\n        eventListener.el.removeEventListener(eventListener.name, eventListener.listener);\n      }\n    }\n  };\n\n  forward(from: string, to: 'input' | 'change' | 'blur' | 'focus', host: HTMLElement) {\n    switch (to) {\n      case 'input':\n        this.add(host, from, () => host.dispatchEvent(new InputEvent(to, { bubbles: true, cancelable: true })));\n        break;\n      case 'change':\n        this.add(host, from, () => host.dispatchEvent(new InputEvent(to, { bubbles: true, cancelable: true })));\n        break;\n      case 'blur':\n        this.add(host, from, () => host.dispatchEvent(new FocusEvent(to, { bubbles: true, cancelable: true })));\n        break;\n      case 'focus':\n        this.add(host, from, () => host.dispatchEvent(new FocusEvent(to, { bubbles: true, cancelable: true })));\n        break;\n    }\n  }\n}\n","import { h, VNode } from '@stencil/core';\n\nexport interface FormControlProps {\n  /** The input id, used to map the input to the label */\n  inputId: string;\n\n  /** The size of the form control */\n  size: 'small' | 'medium' | 'large';\n\n  /** The label id, used to map the label to the input */\n  labelId?: string;\n\n  /** The label text (if the label slot isn't used) */\n  label?: string;\n\n  /** Whether a label slot has been provided. */\n  hasLabelSlot?: boolean;\n\n  /** The help text id, used to map the input to the help text */\n  helpTextId?: string;\n\n  /** The help text (if the help-text slot isn't used) */\n  helpText?: string;\n\n  /** Whether a help text slot has been provided. */\n  hasHelpTextSlot?: boolean;\n\n  /** The error text id, used to map the input to the help text */\n  errorTextId?: string;\n\n  /** The error text */\n  errorText?: string;\n\n  /** Set to true to disable the input. */\n  disabled?: boolean;\n\n  /** Set if the value is required. */\n  required?: boolean;\n\n  /** Set if the error text is displayed. */\n  displayError?: boolean;\n\n  /** A function that gets called when the label is clicked. */\n  onLabelClick?: (event: MouseEvent) => void;\n}\n\nconst FormControl = (props: FormControlProps, children: VNode[]) => {\n  const hasLabel = props.label != null && props.label.trim() !== '' ? true : props.hasLabelSlot ?? false;\n  const hasHelpText = props.helpText != null && props.helpText.trim() !== '' ? true : props.hasHelpTextSlot ?? false;\n\n  return (\n    <div\n      part=\"form-control\"\n      class={{\n        'form-control': true,\n        'form-control--small': props.size === 'small',\n        'form-control--medium': props.size === 'medium',\n        'form-control--large': props.size === 'large',\n        'form-control--has-label': hasLabel,\n        'form-control--has-help-text': hasHelpText,\n        'form-control--has-error-text': props.displayError ?? false,\n        'form-control--disabled': props.disabled ?? false,\n        'form-control--invalid': (props.displayError ?? false) && !props.disabled,\n      }}\n    >\n      <label\n        part=\"label\"\n        id={props.labelId}\n        class={{\n          'form-control__label': true,\n          'form-control__label__required': props.required ?? false,\n        }}\n        htmlFor={props.inputId}\n        aria-hidden={hasLabel ? 'false' : 'true'}\n        onClick={props.onLabelClick}\n      >\n        <slot name=\"label\">{props.label}</slot>\n      </label>\n\n      <div class=\"form-control__input\">{children}</div>\n\n      <div\n        part=\"error-text\"\n        id={props.errorTextId}\n        class=\"form-control__error-text\"\n        aria-hidden={props.displayError ? 'false' : 'true'}\n      >\n        {props.errorText}\n      </div>\n\n      <div\n        part=\"help-text\"\n        id={props.helpTextId}\n        class=\"form-control__help-text\"\n        aria-hidden={hasHelpText ? 'false' : 'true'}\n      >\n        <slot name=\"help-text\">{props.helpText}</slot>\n      </div>\n    </div>\n  );\n};\n\nexport default FormControl;\n","import { Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport FormControl from '../../functional-components/form-control/form-control';\nimport { hasSlot } from '../../utils/slot';\nimport { EmptyPayload } from '../../utils/types';\nimport { EventListeners } from '../../utils/event-listeners';\n\nlet id = 0;\n\n/**\n * @since 1.0\n * @status stable\n *\n * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.\n *\n * @slot label - The checkbox label.\n * @slot error-text - Error text that is shown for validation errors. Alternatively, you can use the error-text prop.\n *\n * @part base - The component's base wrapper.\n * @part control - The checkbox control.\n * @part checked-icon - The container the wraps the checked icon.\n * @part indeterminate-icon - The container that wraps the indeterminate icon.\n * @part text - The checkbox text rendered to the right.\n */\n\n@Component({\n  tag: 'six-checkbox',\n  styleUrl: 'six-checkbox.scss',\n  shadow: true,\n})\nexport class SixCheckbox {\n  private inputId = `checkbox-${++id}`;\n  private labelId = `checkbox-label-${id}`;\n  private textId = `checkbox-text-${id}`;\n  private errorTextId = `input-error-text-${id}`;\n  private nativeInput?: HTMLInputElement;\n  private eventListeners = new EventListeners();\n\n  @Element() host!: HTMLSixCheckboxElement;\n\n  @State() hasFocus = false;\n  @State() hasLabelSlot = false;\n\n  /** The checkbox's name attribute. */\n  @Prop() name = '';\n\n  /**\n   * The value of the checkbox does not mean if it's checked or not, use the `checked`\n   * property for that.\n   *\n   * The value of a checkbox is analogous to the value of an `<input type=\"checkbox\">`,\n   * it's only used when the checkbox participates in a native `<form>`.\n   */\n  @Prop() value = 'on';\n\n  /** Set to true to disable the checkbox. */\n  @Prop() disabled = false;\n\n  /** Set to true to show an asterisk beneath the label. */\n  @Prop() required = false;\n\n  /** The label text. */\n  @Prop() label = '';\n\n  /** The error message shown, if `invalid` is set to true.  */\n  @Prop() errorText = '';\n\n  /** If this property is set to true and an error message is provided by `errorText`, the error message is displayed.  */\n  @Prop({ reflect: true }) invalid = false;\n\n  /** Set to true to draw the checkbox in a checked state. */\n  @Prop({ mutable: true, reflect: true }) checked = false;\n\n  /** Set to true to draw the checkbox in an indeterminate state. */\n  @Prop({ mutable: true, reflect: true }) indeterminate = false;\n\n  /** Emitted when the control loses focus. */\n  @Event({ eventName: 'six-checkbox-blur' }) sixBlur!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the control's checked state changes. */\n  @Event({ eventName: 'six-checkbox-change' }) sixChange!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the control gains focus. */\n  @Event({ eventName: 'six-checkbox-focus' }) sixFocus!: EventEmitter<EmptyPayload>;\n\n  @Watch('checked')\n  @Watch('indeterminate')\n  handleCheckedChange() {\n    if (this.nativeInput == null) return;\n\n    this.nativeInput.checked = this.checked;\n    this.checked = this.nativeInput.checked;\n    this.nativeInput.indeterminate = this.indeterminate;\n  }\n\n  @Watch('errorText')\n  @Watch('label')\n  handleLabelChange() {\n    this.handleSlotChange();\n  }\n\n  connectedCallback() {\n    this.host.shadowRoot?.addEventListener('slotchange', this.handleSlotChange);\n    this.eventListeners.forward('six-checkbox-change', 'change', this.host);\n    this.eventListeners.forward('six-checkbox-blur', 'blur', this.host);\n    this.eventListeners.forward('six-checkbox-focus', 'focus', this.host);\n  }\n\n  disconnectedCallback() {\n    this.host.shadowRoot?.removeEventListener('slotchange', this.handleSlotChange);\n    this.eventListeners.removeAll();\n  }\n\n  componentWillLoad() {\n    this.handleSlotChange();\n  }\n\n  componentDidLoad() {\n    const nativeInput = this.nativeInput;\n    if (nativeInput == null) {\n      return;\n    }\n\n    nativeInput.indeterminate = this.indeterminate;\n  }\n\n  /** Sets focus on the checkbox. */\n  @Method()\n  async setFocus(options?: FocusOptions) {\n    this.nativeInput?.focus(options);\n  }\n\n  /** Removes focus from the checkbox. */\n  @Method()\n  async removeFocus() {\n    this.nativeInput?.blur();\n  }\n\n  private handleChange = () => {\n    if (this.nativeInput != null) {\n      this.checked = this.nativeInput.checked;\n      this.indeterminate = false;\n      this.sixChange.emit();\n    }\n  };\n\n  private handleBlur = () => {\n    this.hasFocus = false;\n    this.sixBlur.emit();\n  };\n\n  private handleFocus = () => {\n    this.hasFocus = true;\n    this.sixFocus.emit();\n  };\n\n  private handleMouseDown = (event: MouseEvent) => {\n    // Prevent clicks on the label from briefly blurring the input\n    event.preventDefault();\n    this.nativeInput?.focus();\n  };\n\n  private handleSlotChange() {\n    this.hasLabelSlot = hasSlot(this.host, 'label');\n  }\n\n  render() {\n    return (\n      <FormControl\n        inputId={this.inputId}\n        label={this.label}\n        labelId={this.labelId}\n        hasLabelSlot={this.hasLabelSlot}\n        errorTextId={this.errorTextId}\n        errorText={this.errorText}\n        size=\"medium\"\n        disabled={this.disabled}\n        required={this.required}\n        displayError={this.invalid}\n      >\n        <label\n          part=\"base\"\n          class={{\n            checkbox: true,\n            'checkbox--checked': this.checked,\n            'checkbox--disabled': this.disabled,\n            'checkbox--focused': this.hasFocus,\n            'checkbox--invalid': this.invalid,\n            'checkbox--indeterminate': this.indeterminate,\n          }}\n          htmlFor={this.inputId}\n          onMouseDown={this.handleMouseDown}\n        >\n          <span part=\"control\" class=\"checkbox__control\">\n            {this.checked && (\n              <span part=\"checked-icon\" class=\"checkbox__icon\">\n                <svg viewBox=\"0 0 16 16\">\n                  <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n                    <g stroke=\"currentColor\" stroke-width=\"2\">\n                      <g transform=\"translate(3.428571, 3.428571)\">\n                        <path d=\"M0,5.71428571 L3.42857143,9.14285714\"></path>\n                        <path d=\"M9.14285714,0 L3.42857143,9.14285714\"></path>\n                      </g>\n                    </g>\n                  </g>\n                </svg>\n              </span>\n            )}\n\n            {!this.checked && this.indeterminate && (\n              <span part=\"indeterminate-icon\" class=\"checkbox__icon\">\n                <svg viewBox=\"0 0 16 16\">\n                  <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n                    <g stroke=\"currentColor\" stroke-width=\"2\">\n                      <g transform=\"translate(2.285714, 6.857143)\">\n                        <path d=\"M10.2857143,1.14285714 L1.14285714,1.14285714\"></path>\n                      </g>\n                    </g>\n                  </g>\n                </svg>\n              </span>\n            )}\n\n            <input\n              ref={(el) => (this.nativeInput = el)}\n              id={this.inputId}\n              type=\"checkbox\"\n              name={this.name}\n              value={this.value}\n              checked={this.checked}\n              disabled={this.disabled}\n              required={this.required}\n              role=\"checkbox\"\n              aria-checked={this.checked ? 'true' : 'false'}\n              aria-labelledby={this.labelId}\n              onChange={this.handleChange}\n              onBlur={this.handleBlur}\n              onFocus={this.handleFocus}\n            />\n          </span>\n\n          <span part=\"text\" id={this.textId} class=\"checkbox__text\">\n            <slot />\n          </span>\n        </label>\n      </FormControl>\n    );\n  }\n}\n","@import 'src/global/component';\n@import '../../functional-components/form-control/form-control';\n\n:host {\n  display: inline-block;\n}\n\n.checkbox {\n  display: inline-flex;\n  align-items: center;\n  font-family: var(--six-font-family);\n  font-size: var(--six-input-font-size-medium);\n  font-weight: var(--six-input-font-weight);\n  color: var(--six-input-color);\n  vertical-align: middle;\n  cursor: pointer;\n}\n\n.checkbox__control {\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: var(--six-selection-control-toggle-size);\n  height: var(--six-selection-control-toggle-size);\n  border: solid var(--six-border-width) var(--six-input-border-color);\n  border-radius: 0;\n  background-color: var(--six-input-background-color);\n  color: var(--six-checkbox-color);\n  transition: var(--six-transition-fast) border-color, var(--six-transition-fast) background-color,\n    var(--six-transition-fast) color, var(--six-transition-fast) box-shadow;\n\n  input[type='checkbox'] {\n    position: absolute;\n    opacity: 0;\n    padding: 0;\n    margin: 0;\n    pointer-events: none;\n  }\n\n  .checkbox__icon {\n    display: inline-flex;\n    width: var(--six-selection-control-toggle-size);\n    height: var(--six-selection-control-toggle-size);\n\n    svg {\n      width: 100%;\n      height: 100%;\n    }\n  }\n}\n\n// Hover\n.checkbox:not(.checkbox--checked):not(.checkbox--disabled) .checkbox__control:hover {\n  border-color: var(--six-input-border-color-hover);\n}\n\n// Checked/indeterminate\n.checkbox--checked .checkbox__control,\n.checkbox--indeterminate .checkbox__control {\n  border-color: var(--six-selection-control-color);\n  background-color: var(--six-selection-control-color);\n}\n\n// Checked/indeterminate + hover\n.checkbox.checkbox--checked:not(.checkbox--disabled) .checkbox__control:hover,\n.checkbox.checkbox--indeterminate:not(.checkbox--disabled) .checkbox__control:hover {\n  border-color: var(--six-input-border-color-focus);\n  background-color: var(--six-input-border-color-focus);\n}\n\n// Disabled\n.checkbox--disabled {\n  cursor: not-allowed;\n  color: var(--six-input-color-disabled);\n\n  .checkbox__control {\n    border-color: var(--six-input-border-color-disabled);\n  }\n\n  &.checkbox--checked .checkbox__control,\n  &.checkbox--indeterminate .checkbox__control {\n    background-color: var(--six-selection-control-color-disabled);\n  }\n}\n\n// Invalid\n.checkbox--invalid:not(.checkbox--disabled) {\n  .checkbox__control {\n    border-color: var(--six-input-border-color-danger);\n  }\n}\n\n.checkbox__text {\n  line-height: var(--six-selection-control-toggle-size);\n  margin-left: 0.5em;\n  user-select: none;\n}\n","//\n// Given a slot, this function iterates over all of its assigned text nodes and returns the concatenated text as a\n// string. This is useful because we can't use slot.textContent as an alternative.\n//\nexport function getTextContent(slot?: HTMLSlotElement): string {\n  const nodes = slot != null ? slot.assignedNodes({ flatten: true }) : [];\n  let text = '';\n\n  [...nodes].map((node) => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      text += node.textContent;\n    }\n  });\n\n  return text;\n}\n\n//\n// Determines whether an element has a slot. If name is specified, the function will look for a corresponding named\n// slot, otherwise it will look for a \"default\" slot (e.g. a non-empty text node or an element with no slot attribute).\n//\nexport function hasSlot(el: HTMLElement, name?: string): boolean {\n  // Look for a named slot\n  if (name != null && name !== '') {\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\n  }\n\n  // Look for a default slot\n  return Array.from(el.childNodes).some((node) => {\n    if (node.nodeType === node.TEXT_NODE && node.textContent?.trim() !== '') {\n      return true;\n    }\n\n    if (node.nodeType === node.ELEMENT_NODE) {\n      const el = node as HTMLElement;\n      if (!el.hasAttribute('slot')) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n}\n\nexport const getSlotChildren = <T extends HTMLElement>(el: HTMLElement) =>\n  el.querySelector('slot')?.assignedElements({ flatten: true }) as T[];\n\nexport function getSlot(element: ParentNode | null | undefined, slotName: string): HTMLElement | null {\n  if (element == null) return null;\n  return element.querySelector(`[slot=\"${slotName}\"]`);\n}\n"],"names":["EventListeners","eventListeners","add","el","name","listener","identifier","push","addEventListener","remove","getFilteredEventListeners","eventListener","removeByIdentifier","sameItem","undefined","find","removeAll","length","pop","removeEventListener","this","filter","item","from","to","host","dispatchEvent","InputEvent","bubbles","cancelable","FocusEvent","FormControl","props","children","hasLabel","label","trim","hasLabelSlot","hasHelpText","helpText","hasHelpTextSlot","h","part","class","size","displayError","disabled","id","labelId","required","htmlFor","inputId","onClick","onLabelClick","errorTextId","errorText","helpTextId","SixCheckbox","textId","handleChange","nativeInput","checked","indeterminate","sixChange","emit","handleBlur","hasFocus","sixBlur","handleFocus","sixFocus","handleMouseDown","event","preventDefault","focus","handleSlotChange","shadowRoot","forward","options","blur","hasSlot","invalid","checkbox","onMouseDown","viewBox","stroke","fill","transform","d","ref","type","value","role","onChange","onBlur","onFocus","getTextContent","slot","nodes","assignedNodes","flatten","text","map","node","nodeType","Node","TEXT_NODE","textContent","querySelector","Array","childNodes","some","ELEMENT_NODE","hasAttribute","getSlotChildren","assignedElements","getSlot","element","slotName"],"sourceRoot":""}