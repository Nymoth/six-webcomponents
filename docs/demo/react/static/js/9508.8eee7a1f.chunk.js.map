{"version":3,"file":"static/js/9508.8eee7a1f.chunk.js","mappings":"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","sources":["../../../libraries/ui-library/dist/esm/src/utils/event-listeners.ts","../../../libraries/ui-library/dist/esm/src/functional-components/form-control/form-control.tsx","../../../libraries/ui-library/dist/esm/src/components/six-textarea/six-textarea.tsx","../../../libraries/ui-library/dist/esm/src/components/six-textarea/six-textarea.scss?tag=six-textarea&encapsulation=shadow","../../../libraries/ui-library/dist/esm/src/utils/slot.ts"],"sourcesContent":["interface EventListener {\n  el: GlobalEventHandlers;\n  name: string;\n  listener: EventListenerOrEventListenerObject;\n  identifier?: string | null;\n}\n\nexport class EventListeners {\n  eventListeners: EventListener[] = [];\n\n  add = <T extends GlobalEventHandlers>(\n    el: T,\n    name: string,\n    listener: EventListenerOrEventListenerObject,\n    identifier: string | null | undefined = null\n  ) => {\n    this.eventListeners.push({ el, name, listener, identifier });\n    el.addEventListener(name, listener);\n  };\n\n  remove = <T extends GlobalEventHandlers>(el: T, name: string, listener: EventListenerOrEventListenerObject) => {\n    this.eventListeners = this.getFilteredEventListeners(\n      (eventListener: EventListener) =>\n        eventListener.listener == listener && eventListener.el === el && eventListener.name === name\n    );\n  };\n\n  removeByIdentifier = (identifier: string) => {\n    const sameItem = (el: EventListener) => el.identifier === identifier;\n    const foundListener = this.eventListeners.find(sameItem) !== undefined;\n    if (!foundListener) {\n      return;\n    }\n    this.eventListeners = this.getFilteredEventListeners(sameItem);\n  };\n\n  private getFilteredEventListeners(sameItem: (el: EventListener) => boolean) {\n    return this.eventListeners.filter((item) => {\n      if (sameItem(item)) {\n        item.el.removeEventListener(item.name, item.listener);\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n\n  removeAll = () => {\n    while (this.eventListeners.length > 0) {\n      const eventListener: EventListener | undefined = this.eventListeners.pop();\n      if (eventListener != null) {\n        eventListener.el.removeEventListener(eventListener.name, eventListener.listener);\n      }\n    }\n  };\n\n  forward(from: string, to: 'input' | 'change' | 'blur' | 'focus', host: HTMLElement) {\n    switch (to) {\n      case 'input':\n        this.add(host, from, () => host.dispatchEvent(new InputEvent(to, { bubbles: true, cancelable: true })));\n        break;\n      case 'change':\n        this.add(host, from, () => host.dispatchEvent(new InputEvent(to, { bubbles: true, cancelable: true })));\n        break;\n      case 'blur':\n        this.add(host, from, () => host.dispatchEvent(new FocusEvent(to, { bubbles: true, cancelable: true })));\n        break;\n      case 'focus':\n        this.add(host, from, () => host.dispatchEvent(new FocusEvent(to, { bubbles: true, cancelable: true })));\n        break;\n    }\n  }\n}\n","import { h, VNode } from '@stencil/core';\n\nexport interface FormControlProps {\n  /** The input id, used to map the input to the label */\n  inputId: string;\n\n  /** The size of the form control */\n  size: 'small' | 'medium' | 'large';\n\n  /** The label id, used to map the label to the input */\n  labelId?: string;\n\n  /** The label text (if the label slot isn't used) */\n  label?: string;\n\n  /** Whether a label slot has been provided. */\n  hasLabelSlot?: boolean;\n\n  /** The help text id, used to map the input to the help text */\n  helpTextId?: string;\n\n  /** The help text (if the help-text slot isn't used) */\n  helpText?: string;\n\n  /** Whether a help text slot has been provided. */\n  hasHelpTextSlot?: boolean;\n\n  /** Whether an error text slot has been provided. */\n  hasErrorTextSlot?: boolean;\n\n  /** The error text id, used to map the input to the help text */\n  errorTextId?: string;\n\n  /** The error text (if the error-text slot isn't used) */\n  errorText?: string | string[];\n\n  /** The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1 */\n  errorTextCount?: number;\n\n  /** Set to true to disable the input. */\n  disabled?: boolean;\n\n  /** Set if the value is required. */\n  required?: boolean;\n\n  /** Set if the error text is displayed. */\n  displayError?: boolean;\n\n  /** A function that gets called when the label is clicked. */\n  onLabelClick?: (event: MouseEvent) => void;\n}\n\nconst FormControl = (props: FormControlProps, children: VNode[]) => {\n  const errorMessages = (Array.isArray(props.errorText) ? props.errorText : [props.errorText]).filter(\n    (text) => text != null && text.trim() !== ''\n  );\n\n  const hasLabel = props.label != null && props.label.trim() !== '' ? true : props.hasLabelSlot ?? false;\n  const hasHelpText = props.helpText != null && props.helpText.trim() !== '' ? true : props.hasHelpTextSlot ?? false;\n  const hasErrorText = (errorMessages.length > 0 || (props.hasErrorTextSlot ?? false)) && (props.displayError ?? false);\n\n  return (\n    <div\n      part=\"form-control\"\n      class={{\n        'form-control': true,\n        'form-control--small': props.size === 'small',\n        'form-control--medium': props.size === 'medium',\n        'form-control--large': props.size === 'large',\n        'form-control--has-label': hasLabel,\n        'form-control--has-help-text': hasHelpText,\n        'form-control--has-error-text': hasErrorText,\n        'form-control--disabled': props.disabled ?? false,\n        'form-control--invalid': (props.displayError ?? false) && !props.disabled,\n      }}\n    >\n      <label\n        part=\"label\"\n        id={props.labelId}\n        class={{\n          'form-control__label': true,\n          'form-control__label__required': props.required ?? false,\n        }}\n        htmlFor={props.inputId}\n        aria-hidden={hasLabel ? 'false' : 'true'}\n        onClick={props.onLabelClick}\n      >\n        <slot name=\"label\">{props.label}</slot>\n      </label>\n\n      <div class=\"form-control__input\">{children}</div>\n\n      <div\n        part=\"error-text\"\n        id={props.errorTextId}\n        class=\"form-control__error-text\"\n        aria-hidden={hasErrorText ? 'false' : 'true'}\n      >\n        <slot name=\"error-text\">\n          {errorMessages.slice(0, props.errorTextCount ?? 1).map((text) => (\n            <six-error>{text}</six-error>\n          ))}\n        </slot>\n      </div>\n\n      <div\n        part=\"help-text\"\n        id={props.helpTextId}\n        class=\"form-control__help-text\"\n        aria-hidden={hasHelpText ? 'false' : 'true'}\n      >\n        <slot name=\"help-text\">{props.helpText}</slot>\n      </div>\n    </div>\n  );\n};\n\nexport default FormControl;\n","import { Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport FormControl from '../../functional-components/form-control/form-control';\nimport { hasSlot } from '../../utils/slot';\nimport { EventListeners } from '../../utils/event-listeners';\nimport { EmptyPayload } from '../../utils/types';\n\nlet id = 0;\n\n/**\n * @since 1.0\n * @status stable\n *\n * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.\n *\n * @slot label - The textarea's label. Alternatively, you can use the label prop.\n * @slot help-text - Help text that describes how to use the input.\n * @slot error-text - Error text that is shown for validation errors. Alternatively, you can use the error-text prop.\n *\n * @part base - The component's base wrapper.\n * @part form-control - The form control that wraps the label, textarea, and help text.\n * @part label - The textarea label.\n * @part textarea - The textarea control.\n * @part help-text - The textarea help text.\n */\n@Component({\n  tag: 'six-textarea',\n  styleUrl: 'six-textarea.scss',\n  shadow: true,\n})\nexport class SixTextarea {\n  private inputId = `textarea-${++id}`;\n  private labelId = `textarea-label-${id}`;\n  private helpTextId = `textarea-help-text-${id}`;\n  private errorTextId = `input-error-text-${id}`;\n  private nativeTextarea?: HTMLTextAreaElement;\n  private eventListeners = new EventListeners();\n  private resizeObserver = new ResizeObserver(() => this.setTextareaHeight());\n\n  @Element() host!: HTMLSixTextareaElement;\n\n  @State() hasFocus = false;\n  @State() hasHelpTextSlot = false;\n  @State() hasLabelSlot = false;\n  @State() hasErrorTextSlot = false;\n\n  /** The textarea's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The textarea's name attribute. */\n  @Prop({ reflect: true }) name = '';\n\n  /** The textarea's value attribute. */\n  @Prop({ mutable: true, reflect: true }) value = '';\n\n  /** The textarea's help text. Alternatively, you can use the help-text slot. */\n  @Prop() helpText = '';\n\n  /** The textarea's placeholder text. */\n  @Prop() placeholder?: string;\n\n  /** The number of rows to display by default. */\n  @Prop() rows = 4;\n\n  /** Controls how the textarea can be resized. */\n  @Prop() resize: 'none' | 'vertical' | 'auto' = 'vertical';\n\n  /** Set to true to disable the textarea. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** Set to true for a readonly textarea. */\n  @Prop({ reflect: true }) readonly = false;\n\n  /** The minimum length of input that will be considered valid. */\n  @Prop({ reflect: true }) minlength?: number;\n\n  /** The maximum length of input that will be considered valid. */\n  @Prop({ reflect: true }) maxlength?: number;\n\n  /** Set to true to show an asterisk beneath the label. */\n  @Prop() required = false;\n\n  /** The label text. */\n  @Prop() label = '';\n\n  /** The error message shown, if `invalid` is set to true.  */\n  @Prop() errorText: string | string[] = '';\n\n  /** The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1 */\n  @Prop() errorTextCount?: number;\n\n  /** If this property is set to true and an error message is provided by `errorText`, the error message is displayed.  */\n  @Prop({ reflect: true }) invalid = false;\n\n  /** The textarea's autocaptialize attribute. */\n  @Prop() autocapitalize = 'off';\n\n  /** The textarea's autocorrect attribute. */\n  @Prop() autocorrect: 'on' | 'off' = 'off';\n\n  /** The textarea's autocomplete attribute. */\n  @Prop() autocomplete = 'off';\n\n  /** The textarea's autofocus attribute. */\n  @Prop() autofocus = false;\n\n  /** The textarea's spellcheck attribute. */\n  @Prop() spellcheck = false;\n\n  /** The textarea's inputmode attribute. */\n  @Prop() inputmode?: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';\n\n  /** Emitted when the control's value changes. Access the new value via event.target.value. */\n  @Event({ eventName: 'six-textarea-change' }) sixChange!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the control receives input. Access the new value via event.target.value. */\n  @Event({ eventName: 'six-textarea-input' }) sixInput!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the control gains focus. */\n  @Event({ eventName: 'six-textarea-focus' }) sixFocus!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the control loses focus. Access the new value via event.target.value. */\n  @Event({ eventName: 'six-textarea-blur' }) sixBlur!: EventEmitter<EmptyPayload>;\n\n  @Watch('helpText')\n  @Watch('errorText')\n  @Watch('label')\n  handleLabelChange() {\n    this.handleSlotChange();\n  }\n\n  @Watch('rows')\n  handleRowsChange() {\n    this.setTextareaHeight();\n  }\n\n  @Watch('value')\n  handleValueChange() {\n    this.value = this.getValue();\n    if (this.nativeTextarea != null) {\n      if (this.nativeTextarea.value !== this.value) {\n        this.nativeTextarea.value = this.value;\n      }\n    }\n  }\n\n  connectedCallback() {\n    this.host.shadowRoot?.addEventListener('slotchange', this.handleSlotChange);\n    this.eventListeners.forward('six-textarea-input', 'input', this.host);\n    this.eventListeners.forward('six-textarea-change', 'change', this.host);\n    this.eventListeners.forward('six-textarea-focus', 'focus', this.host);\n    this.eventListeners.forward('six-textarea-blur', 'blur', this.host);\n  }\n\n  componentWillLoad() {\n    this.handleSlotChange();\n  }\n\n  componentDidLoad() {\n    this.setTextareaHeight();\n    if (this.nativeTextarea != null) {\n      this.resizeObserver.observe(this.nativeTextarea);\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.nativeTextarea != null) {\n      this.resizeObserver.unobserve(this.nativeTextarea);\n    }\n    this.host.shadowRoot?.removeEventListener('slotchange', this.handleSlotChange);\n    this.eventListeners.removeAll();\n  }\n\n  /** Sets focus on the textarea. */\n  @Method()\n  async setFocus(options?: FocusOptions) {\n    this.nativeTextarea?.focus(options);\n  }\n\n  /** Removes focus fromt the textarea. */\n  @Method()\n  async removeFocus() {\n    this.nativeTextarea?.blur();\n  }\n\n  /** Selects all the text in the input. */\n  @Method()\n  async select() {\n    return this.nativeTextarea?.select();\n  }\n\n  /** Sets the start and end positions of the text selection (0-based). */\n  @Method()\n  async setSelectionRange(\n    selectionStart: number,\n    selectionEnd: number,\n    selectionDirection: 'forward' | 'backward' | 'none' = 'none'\n  ) {\n    return this.nativeTextarea?.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\n  }\n\n  /** Replaces a range of text with a new string. */\n  @Method()\n  async setRangeText(\n    replacement: string,\n    start: number,\n    end: number,\n    selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve'\n  ) {\n    if (this.nativeTextarea == null) return;\n\n    this.nativeTextarea.setRangeText(replacement, start, end, selectMode);\n    if (this.getValue() !== this.nativeTextarea.value) {\n      this.value = this.nativeTextarea.value;\n      this.setTextareaHeight();\n      this.sixChange.emit();\n      this.sixInput.emit();\n    }\n  }\n\n  private handleChange = () => {\n    if (this.nativeTextarea != null) {\n      this.value = this.nativeTextarea.value;\n      this.sixChange.emit();\n    }\n  };\n\n  private handleInput = () => {\n    if (this.nativeTextarea != null) {\n      this.value = this.nativeTextarea.value;\n      this.setTextareaHeight();\n      this.sixInput.emit();\n    }\n  };\n\n  private handleBlur = () => {\n    this.hasFocus = false;\n    this.sixBlur.emit();\n  };\n\n  private handleFocus = () => {\n    this.hasFocus = true;\n    this.sixFocus.emit();\n  };\n\n  private handleSlotChange = () => {\n    this.hasLabelSlot = hasSlot(this.host, 'label');\n    this.hasHelpTextSlot = hasSlot(this.host, 'help-text');\n    this.hasErrorTextSlot = hasSlot(this.host, 'error-text');\n  };\n\n  private setTextareaHeight() {\n    if (this.nativeTextarea == null) return;\n\n    if (this.resize === 'auto') {\n      this.nativeTextarea.style.height = 'auto';\n      this.nativeTextarea.style.height = this.nativeTextarea.scrollHeight + 'px';\n    } else {\n      (this.nativeTextarea.style.height as string | undefined) = undefined;\n    }\n  }\n\n  private getValue(): string {\n    return (this.value ?? '').toString();\n  }\n\n  render() {\n    return (\n      <FormControl\n        inputId={this.inputId}\n        label={this.label}\n        labelId={this.labelId}\n        hasLabelSlot={this.hasLabelSlot}\n        helpTextId={this.helpTextId}\n        helpText={this.helpText}\n        hasHelpTextSlot={this.hasHelpTextSlot}\n        errorTextId={this.errorTextId}\n        errorText={this.errorText}\n        errorTextCount={this.errorTextCount}\n        hasErrorTextSlot={this.hasErrorTextSlot}\n        size={this.size}\n        disabled={this.disabled}\n        required={this.required}\n        displayError={this.invalid}\n      >\n        <div\n          part=\"base\"\n          class={{\n            textarea: true,\n\n            // Sizes\n            'textarea--small': this.size === 'small',\n            'textarea--medium': this.size === 'medium',\n            'textarea--large': this.size === 'large',\n\n            // States\n            'textarea--disabled': this.disabled,\n            'textarea--focused': this.hasFocus,\n            'textarea--empty': this.getValue().length === 0,\n            'textarea--invalid': this.invalid,\n\n            // Modifiers\n            'textarea--resize-none': this.resize === 'none',\n            'textarea--resize-vertical': this.resize === 'vertical',\n            'textarea--resize-auto': this.resize === 'auto',\n          }}\n        >\n          <textarea\n            part=\"textarea\"\n            ref={(el) => (this.nativeTextarea = el)}\n            id={this.inputId}\n            class=\"textarea__control\"\n            name={this.name}\n            placeholder={this.placeholder}\n            disabled={this.disabled}\n            readOnly={this.readonly}\n            rows={this.rows}\n            minLength={this.minlength}\n            maxLength={this.maxlength}\n            value={this.getValue()}\n            autoCapitalize={this.autocapitalize}\n            autoCorrect={this.autocorrect}\n            autoFocus={this.autofocus}\n            spellcheck={this.spellcheck}\n            required={this.required}\n            inputMode={this.inputmode}\n            aria-labelledby={this.labelId}\n            onChange={this.handleChange}\n            onInput={this.handleInput}\n            onFocus={this.handleFocus}\n            onBlur={this.handleBlur}\n          />\n        </div>\n      </FormControl>\n    );\n  }\n}\n","@import 'src/global/component';\n@import '../../functional-components/form-control/form-control';\n\n:host {\n  display: block;\n}\n\n.textarea {\n  display: flex;\n  align-items: center;\n  position: relative;\n  width: 100%;\n  font-family: var(--six-font-family);\n  font-weight: var(--six-input-font-weight);\n  line-height: var(--six-line-height-normal);\n  letter-spacing: var(--six-input-letter-spacing);\n  background-color: var(--six-input-background-color);\n  border: solid var(--six-border-width) var(--six-input-border-color);\n  vertical-align: middle;\n  transition: var(--six-transition-fast) color, var(--six-transition-fast) border, var(--six-transition-fast) box-shadow;\n  cursor: text;\n\n  &:hover:not(.textarea--disabled) {\n    background-color: var(--six-input-background-color-hover);\n    border-color: var(--six-input-border-color-hover);\n\n    .textarea__control {\n      color: var(--six-input-color-hover);\n    }\n  }\n\n  &.textarea--focused:not(.textarea--disabled) {\n    background-color: var(--six-input-background-color-focus);\n    box-shadow: var(--six-input-focus-shadow);\n    border-color: var(--six-input-border-color-focus);\n    color: var(--six-input-color-focus);\n\n    .textarea__control {\n      color: var(--six-input-color-focus);\n    }\n  }\n\n  &.textarea--disabled {\n    background-color: var(--six-input-background-color-disabled);\n    border-color: var(--six-input-border-color-disabled);\n    cursor: not-allowed;\n\n    .textarea__control {\n      color: var(--six-input-color-disabled);\n\n      &::placeholder {\n        color: var(--six-input-placeholder-color-disabled);\n      }\n    }\n  }\n}\n\n.textarea__control {\n  flex: 1 1 auto;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n  line-height: 1.4;\n  color: var(--sl-input-color);\n  border: none;\n  background: none;\n  box-shadow: none;\n  cursor: inherit;\n  -webkit-appearance: none;\n\n  &::-webkit-search-decoration,\n  &::-webkit-search-cancel-button,\n  &::-webkit-search-results-button,\n  &::-webkit-search-results-decoration {\n    -webkit-appearance: none;\n  }\n\n  &::placeholder {\n    color: var(--six-input-placeholder-color);\n    user-select: none;\n  }\n\n  &:focus {\n    outline: none;\n  }\n}\n\n.textarea--invalid:not(.textarea--disabled):not(.textarea--focused) {\n  border-color: var(--six-input-border-color-danger);\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Size modifiers\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n.textarea--small {\n  border-radius: var(--six-input-border-radius-small);\n  font-size: var(--six-input-font-size-small);\n\n  .textarea__control {\n    padding: 0.5em var(--six-input-spacing-small);\n  }\n}\n\n.textarea--medium {\n  border-radius: var(--six-input-border-radius-medium);\n  font-size: var(--six-input-font-size-medium);\n\n  .textarea__control {\n    padding: 0.5em var(--six-input-spacing-medium);\n  }\n}\n\n.textarea--large {\n  border-radius: var(--six-input-border-radius-large);\n  font-size: var(--six-input-font-size-large);\n\n  .textarea__control {\n    padding: 0.5em var(--six-input-spacing-large);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Resize types\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n.textarea--resize-none .textarea__control {\n  resize: none;\n}\n\n.textarea--resize-vertical .textarea__control {\n  resize: vertical;\n}\n\n.textarea--resize-auto .textarea__control {\n  height: auto;\n  resize: none;\n}\n","//\n// Given a slot, this function iterates over all of its assigned text nodes and returns the concatenated text as a\n// string. This is useful because we can't use slot.textContent as an alternative.\n//\nexport function getTextContent(slot?: HTMLSlotElement): string {\n  const nodes = slot != null ? slot.assignedNodes({ flatten: true }) : [];\n  let text = '';\n\n  [...nodes].map((node) => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      text += node.textContent;\n    }\n  });\n\n  return text;\n}\n\n//\n// Determines whether an element has a slot. If name is specified, the function will look for a corresponding named\n// slot, otherwise it will look for a \"default\" slot (e.g. a non-empty text node or an element with no slot attribute).\n//\nexport function hasSlot(el: HTMLElement, name?: string): boolean {\n  // Look for a named slot\n  if (name != null && name !== '') {\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\n  }\n\n  // Look for a default slot\n  return Array.from(el.childNodes).some((node) => {\n    if (node.nodeType === node.TEXT_NODE && node.textContent?.trim() !== '') {\n      return true;\n    }\n\n    if (node.nodeType === node.ELEMENT_NODE) {\n      const el = node as HTMLElement;\n      if (!el.hasAttribute('slot')) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n}\n\nexport const getSlotChildren = <T extends HTMLElement>(el: HTMLElement) =>\n  el.querySelector('slot')?.assignedElements({ flatten: true }) as T[];\n\nexport function getSlot(element: ParentNode | null | undefined, slotName: string): HTMLElement | null {\n  if (element == null) return null;\n  return element.querySelector(`[slot=\"${slotName}\"]`);\n}\n"],"names":["EventListeners","eventListeners","add","el","name","listener","identifier","push","addEventListener","remove","getFilteredEventListeners","eventListener","removeByIdentifier","sameItem","undefined","find","removeAll","length","pop","removeEventListener","this","filter","item","from","to","host","dispatchEvent","InputEvent","bubbles","cancelable","FocusEvent","FormControl","props","children","errorMessages","Array","isArray","errorText","text","trim","hasLabel","label","hasLabelSlot","hasHelpText","helpText","hasHelpTextSlot","hasErrorText","hasErrorTextSlot","displayError","h","part","class","size","disabled","id","labelId","required","htmlFor","inputId","onClick","onLabelClick","errorTextId","slice","errorTextCount","map","helpTextId","SixTextarea","resizeObserver","ResizeObserver","setTextareaHeight","handleChange","nativeTextarea","value","sixChange","emit","handleInput","sixInput","handleBlur","hasFocus","sixBlur","handleFocus","sixFocus","handleSlotChange","hasSlot","getValue","shadowRoot","forward","observe","unobserve","options","focus","blur","select","selectionStart","selectionEnd","selectionDirection","setSelectionRange","replacement","start","end","selectMode","setRangeText","resize","style","height","scrollHeight","toString","invalid","textarea","ref","placeholder","readOnly","readonly","rows","minLength","minlength","maxLength","maxlength","autoCapitalize","autocapitalize","autoCorrect","autocorrect","autoFocus","autofocus","spellcheck","inputMode","inputmode","onChange","onInput","onFocus","onBlur","getTextContent","slot","nodes","assignedNodes","flatten","node","nodeType","Node","TEXT_NODE","textContent","querySelector","childNodes","some","ELEMENT_NODE","hasAttribute","getSlotChildren","assignedElements","getSlot","element","slotName"],"sourceRoot":""}