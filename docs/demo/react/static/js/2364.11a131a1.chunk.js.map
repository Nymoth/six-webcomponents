{"version":3,"file":"static/js/2364.11a131a1.chunk.js","mappings":"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","sources":["../../../libraries/ui-library/dist/esm/src/components/six-tile/six-tile.tsx","../../../libraries/ui-library/dist/esm/src/components/six-tile/six-tile.scss?tag=six-tile&encapsulation=shadow","../../../libraries/ui-library/dist/esm/src/utils/slot.ts"],"sourcesContent":["import { Component, Element, Event, EventEmitter, h, Method, Prop, State } from '@stencil/core';\nimport { EmptyPayload } from '../../utils/types';\nimport { getSlot, hasSlot } from '../../utils/slot';\n\n/**\n * @since 1.0\n * @status stable\n */\n\n@Component({\n  tag: 'six-tile',\n  styleUrl: 'six-tile.scss',\n  shadow: true,\n})\nexport class SixTile {\n  @Element() host!: HTMLSixTileElement;\n\n  /** The tile's label. */\n  @Prop() label = '';\n\n  /** The icon's name. */\n  @Prop() iconName?: string;\n\n  /** Flag, whether the tile is closeable. */\n  @Prop() closeable = true;\n\n  /** Flag, whether the tile should cast a shadow. */\n  @Prop() elevated = false;\n\n  /** Enables tile tooltip for tiles */\n  @Prop() disableTooltip = true;\n\n  /** Set to true to disable the tile. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** The tile's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  @State() visible = true;\n\n  /** Emitted when the tile was closed. */\n  @Event({ eventName: 'six-tile-closed' }) sixTileClose!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the tile is selected. */\n  @Event({ eventName: 'six-tile-selected' }) sixTileSelected!: EventEmitter<EmptyPayload>;\n\n  /** Hides the tile */\n  @Method()\n  async hide() {\n    this.visible = false;\n  }\n\n  /** Shows the tile */\n  @Method()\n  async show() {\n    this.visible = true;\n  }\n\n  @State() hasIconSlot = false;\n\n  @State() hasLabelSlot = false;\n\n  componentWillLoad() {\n    this.handleSlotChange();\n  }\n\n  private handleSlotChange = () => {\n    this.hasIconSlot = hasSlot(this.host, 'icon');\n    this.hasLabelSlot = hasSlot(this.host, 'label');\n\n    if (this.hasIconSlot) {\n      const slot = getSlot(this.host, 'icon');\n      slot?.addEventListener('click', this.handleClickEvent);\n    }\n\n    if (this.hasLabelSlot) {\n      const slot = getSlot(this.host, 'label');\n      slot?.addEventListener('click', this.handleClickEvent);\n    }\n  };\n\n  render() {\n    return (\n      <six-tooltip disabled={this.disableTooltip || this.label === ''} content={this.label}>\n        <div\n          part=\"base\"\n          class={{\n            tile: true,\n            'tile--visible': this.visible,\n            'tile--small': this.size === 'small',\n            'tile--medium': this.size === 'medium',\n            'tile--large': this.size === 'large',\n            'tile--elevated': this.elevated,\n          }}\n        >\n          <div part=\"header\" class=\"tile__header\">\n            <six-icon-button\n              class={{\n                'tile__header--hidden': !this.closeable,\n              }}\n              name=\"close\"\n              size={closeIconSize(this.size)}\n              onClick={this.handleCloseClickEvent}\n            />\n          </div>\n\n          <div part=\"body\" class=\"tile__body\">\n            {this.iconName && (\n              <six-icon onClick={this.handleClickEvent} size={iconSize(this.size)}>\n                {this.iconName}\n              </six-icon>\n            )}\n            {this.hasIconSlot && <slot name=\"icon\"></slot>}\n          </div>\n\n          <div\n            part=\"footer\"\n            class={{\n              'tile__footer--small': this.size === 'small',\n              'tile__footer--medium': this.size === 'medium',\n              'tile__footer--large': this.size === 'large',\n            }}\n          >\n            {this.label && (\n              <div\n                class={{\n                  '.label__footer': true,\n                }}\n                onClick={this.handleClickEvent}\n              >\n                {this.label}\n              </div>\n            )}\n            {this.hasLabelSlot && <slot name=\"label\"></slot>}\n          </div>\n        </div>\n      </six-tooltip>\n    );\n  }\n\n  private handleCloseClickEvent = () => {\n    this.visible = false;\n    this.sixTileClose.emit();\n  };\n\n  private handleClickEvent = () => {\n    this.sixTileSelected.emit();\n  };\n}\n\nconst closeIconSize = (size: string) => {\n  return {\n    small: 'xxSmall',\n    medium: 'medium',\n    large: 'medium',\n  }[size] as 'xSmall' | 'medium';\n};\n\nconst iconSize = (size: string) => {\n  return {\n    small: 'xLarge',\n    medium: 'xxLarge',\n    large: 'xxxLarge',\n  }[size] as 'xLarge' | 'xxLarge' | 'xxxLarge';\n};\n","@import 'src/global/component';\n\n:host {\n  display: inline-block;\n}\n\n.tile {\n  &--small {\n    --tile-size: 80px;\n    --tile-padding-size: var(--six-spacing-medium);\n  }\n\n  &--medium {\n    --tile-size: 120px;\n    --tile-padding-size: var(--six-spacing-large);\n  }\n\n  &--large {\n    --tile-size: 160px;\n    --tile-padding-size: var(--six-spacing-x-large);\n  }\n\n  min-height: var(--tile-size);\n  width: var(--tile-size);\n\n  background-color: var(--six-color-clay-50);\n\n  display: inline-grid;\n  grid-template-columns: 100%;\n  grid-template-areas:\n    'header'\n    'middle'\n    'footer';\n\n  &:not(.tile--visible) {\n    visibility: hidden;\n  }\n\n  &--elevated {\n    border: 0;\n    box-shadow: var(--six-elevation-8dp);\n  }\n}\n\n.tile__header {\n  grid-area: header;\n  height: 5%;\n  justify-self: right;\n  display: flex;\n  justify-content: right;\n  opacity: 0;\n  transition: var(--six-transition-fast) opacity;\n\n  .tile:hover > & {\n    opacity: 1;\n  }\n\n  &--hidden {\n    visibility: hidden;\n  }\n\n  six-icon-button {\n    margin-top: -6px;\n    margin-right: -6px;\n    margin-bottom: -16px;\n  }\n}\n\n.tile__body {\n  grid-area: middle;\n  display: grid;\n  place-items: center;\n  cursor: pointer;\n\n  six-icon::part(base) {\n    padding: 0;\n  }\n\n  &--small {\n    @extend .tile__body;\n    --tile-padding-size: var(--six-spacing-medium);\n  }\n\n  &--medium {\n    @extend .tile__body;\n    --tile-padding-size: var(--six-spacing-large);\n  }\n\n  &--large {\n    @extend .tile__body;\n    --tile-padding-size: var(--six-spacing-x-large);\n  }\n\n  padding-left: var(--tile-padding-size);\n  padding-right: var(--tile-padding-size);\n}\n\n.tile__footer {\n  grid-area: footer;\n  display: flex;\n  justify-content: center;\n  cursor: pointer;\n  font-weight: var(--six-font-weight-normal);\n  color: var(--six-color-web-rock-900);\n\n  &--small {\n    @extend .tile__footer;\n    font-size: var(--six-font-size-xxx-small);\n  }\n\n  &--medium {\n    @extend .tile__footer;\n    font-size: var(--six-font-size-xx-small);\n  }\n\n  &--large {\n    @extend .tile__footer;\n    font-size: var(--six-font-size-small);\n  }\n\n  .label__footer {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    width: calc(var(--tile-size) - 2em);\n    text-align: center;\n  }\n}\n","//\n// Given a slot, this function iterates over all of its assigned text nodes and returns the concatenated text as a\n// string. This is useful because we can't use slot.textContent as an alternative.\n//\nexport function getTextContent(slot?: HTMLSlotElement): string {\n  const nodes = slot != null ? slot.assignedNodes({ flatten: true }) : [];\n  let text = '';\n\n  [...nodes].map((node) => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      text += node.textContent;\n    }\n  });\n\n  return text;\n}\n\n//\n// Determines whether an element has a slot. If name is specified, the function will look for a corresponding named\n// slot, otherwise it will look for a \"default\" slot (e.g. a non-empty text node or an element with no slot attribute).\n//\nexport function hasSlot(el: HTMLElement, name?: string): boolean {\n  // Look for a named slot\n  if (name != null && name !== '') {\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\n  }\n\n  // Look for a default slot\n  return Array.from(el.childNodes).some((node) => {\n    if (node.nodeType === node.TEXT_NODE && node.textContent?.trim() !== '') {\n      return true;\n    }\n\n    if (node.nodeType === node.ELEMENT_NODE) {\n      const el = node as HTMLElement;\n      if (!el.hasAttribute('slot')) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n}\n\nexport const getSlotChildren = <T extends HTMLElement>(el: HTMLElement) =>\n  el.querySelector('slot')?.assignedElements({ flatten: true }) as T[];\n\nexport function getSlot(element: ParentNode | null | undefined, slotName: string): HTMLElement | null {\n  if (element == null) return null;\n  return element.querySelector(`[slot=\"${slotName}\"]`);\n}\n"],"names":["SixTile","handleSlotChange","hasIconSlot","hasSlot","host","hasLabelSlot","slot","getSlot","addEventListener","handleClickEvent","handleCloseClickEvent","visible","sixTileClose","emit","sixTileSelected","this","h","disabled","disableTooltip","label","content","part","class","tile","size","elevated","closeable","name","closeIconSize","onClick","iconName","iconSize","small","medium","large","getTextContent","nodes","assignedNodes","flatten","text","map","node","nodeType","Node","TEXT_NODE","textContent","el","querySelector","Array","from","childNodes","some","trim","ELEMENT_NODE","hasAttribute","getSlotChildren","assignedElements","element","slotName"],"sourceRoot":""}