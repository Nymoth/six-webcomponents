{"version":3,"file":"static/js/1888.8a9e8241.chunk.js","mappings":"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","sources":["../../../libraries/ui-library/dist/esm/src/utils/offset.ts","../../../libraries/ui-library/dist/esm/src/utils/scroll.ts","../../../libraries/ui-library/dist/esm/src/components/six-sidebar/six-sidebar.tsx","../../../libraries/ui-library/dist/esm/src/components/six-sidebar/six-sidebar.scss?tag=six-sidebar&encapsulation=shadow","../../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"],"sourcesContent":["//\n// Returns an element's offset relative to its parent. Similar to element.offsetTop and element.offsetLeft, except the\n// parent doesn't have to be positioned relative or absolute.\n//\n// NOTE: This was created to work around what appears to be a bug in Chrome where a slotted element's offsetParent\n// seems to ignore elements inside the surrounding shadow DOM: https://bugs.chromium.org/p/chromium/issues/detail?id=920069\n//\nexport function getOffset(element: HTMLElement, parent: HTMLElement) {\n  return {\n    top: Math.round(element.getBoundingClientRect().top - parent.getBoundingClientRect().top),\n    left: Math.round(element.getBoundingClientRect().left - parent.getBoundingClientRect().left),\n  };\n}\n","import { getOffset } from './offset';\n\nconst locks = new Set();\n\n//\n// Prevents body scrolling. Keeps track of which elements requested a lock so multiple levels of locking are possible\n// without premature unlocking.\n//\nexport function lockBodyScrolling(lockingEl: HTMLElement) {\n  locks.add(lockingEl);\n  document.body.classList.add('six-scroll-lock');\n}\n\n//\n// Unlocks body scrolling. Scrolling will only be unlocked once all elements that requested a lock call this method.\n//\nexport function unlockBodyScrolling(lockingEl: HTMLElement) {\n  locks.delete(lockingEl);\n\n  if (locks.size === 0) {\n    document.body.classList.remove('six-scroll-lock');\n  }\n}\n\n//\n// Scrolls an element into view of its container. If the element is already in view, nothing will happen.\n//\nexport function scrollIntoView(\n  element: HTMLElement,\n  container: HTMLElement,\n  direction: 'horizontal' | 'vertical' | 'both' = 'vertical',\n  behavior: 'smooth' | 'auto' = 'smooth'\n) {\n  const offset = getOffset(element, container);\n  const offsetTop = offset.top + container.scrollTop;\n  const offsetLeft = offset.left + container.scrollLeft;\n  const minX = container.scrollLeft;\n  const maxX = container.scrollLeft + container.offsetWidth;\n  const minY = container.scrollTop;\n  const maxY = container.scrollTop + container.offsetHeight;\n\n  if (direction === 'horizontal' || direction === 'both') {\n    if (offsetLeft < minX) {\n      container.scrollTo({ left: offsetLeft, behavior });\n    } else if (offsetLeft + element.clientWidth > maxX) {\n      container.scrollTo({ left: offsetLeft - container.offsetWidth + element.clientWidth, behavior });\n    }\n  }\n\n  if (direction === 'vertical' || direction === 'both') {\n    if (offsetTop < minY) {\n      container.scrollTo({ top: offsetTop, behavior });\n    } else if (offsetTop + element.clientHeight > maxY) {\n      container.scrollTo({ top: offsetTop - container.offsetHeight + element.clientHeight, behavior });\n    }\n  }\n}\n","import { Component, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { EmptyPayload } from '../../utils/types';\nimport { scrollIntoView } from '../../utils/scroll';\n\nconst isSidebarItemGroup = (node?: Element | null): boolean =>\n  node?.tagName?.toLowerCase() === 'six-sidebar-item-group';\n\n/**\n * @since 1.0\n * @status stable\n *\n * @slot - Used to define the nested side bar [group] items.\n */\n\n@Component({\n  tag: 'six-sidebar',\n  styleUrl: 'six-sidebar.scss',\n  shadow: true,\n})\nexport class SixSidebar {\n  private willShow = false;\n  private willHide = false;\n\n  private sidebar?: HTMLElement;\n\n  @State() isVisible = false;\n\n  /** Sidebar position */\n  @Prop() position: 'left' | 'right' = 'left';\n\n  /** Indicates whether the sidebar is open. You can use this in lieu of the show/hide methods. */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  /** Sidebar width */\n  @Prop() width = '16rem';\n\n  /** Define whether sidebar is toggled meaning only one menu can be open at the same time*/\n  @Prop() toggled = false;\n\n  /** Emitted when the sidebar opens. Calling `event.preventDefault()` will prevent it from being opened. */\n  @Event({ eventName: 'six-sidebar-show' }) sixShow!: EventEmitter<EmptyPayload>;\n\n  /** Emitted after the sidebar opens and all transitions are complete. */\n  @Event({ eventName: 'six-sidebar-after-show' }) sixAfterShow!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the sidebar closes. Calling `event.preventDefault()` will prevent it from being closed. */\n  @Event({ eventName: 'six-sidebar-hide' }) sixHide!: EventEmitter<EmptyPayload>;\n\n  /** Emitted after the sidebar closes and all transitions are complete. */\n  @Event({ eventName: 'six-sidebar-after-hide' }) sixAfterHide!: EventEmitter<EmptyPayload>;\n\n  /**\n   * Emitted when the sidebar opens and the panel gains focus. Calling `event.preventDefault()` will prevent focus and\n   * allow you to set it on a different element in the sidebar, such as an input or button.\n   */\n  @Event({ eventName: 'six-sidebar-initial-focus' }) sixInitialFocus!: EventEmitter<EmptyPayload>;\n\n  @Watch('open')\n  handleOpenChange() {\n    this.open ? this.show() : this.hide();\n  }\n\n  private handleTransitionEnd = (event: TransitionEvent) => {\n    const target = event.target as HTMLElement;\n\n    // Ensure we only emit one event when the target element is no longer visible\n    if (event.type === 'transitionend' && target.classList.contains('sidebar__container')) {\n      this.resetTransitionVariables();\n    }\n  };\n\n  componentWillLoad() {\n    // Show on init if open\n    if (this.open) {\n      void this.show();\n      // if the sidebar is open by default we need to manually reset the\n      // transition variables since there will be no transition event\n      this.resetTransitionVariables();\n    }\n  }\n\n  componentDidRender() {\n    this.setupTogglableMenuItems();\n  }\n\n  disconnectedCallback() {\n    this.sidebar?.removeEventListener('six-details-show', this.closeSiblingDetailsOnShow);\n  }\n\n  private closeSiblingDetailsOnShow = (event: Event) => {\n    const clickedMenuItem = event.target as HTMLElement;\n    if (this.sidebar != null) {\n      scrollIntoView(clickedMenuItem, this.sidebar);\n    }\n\n    const closeAllSiblingsBySiblingProperty = (\n      getSibling: (node: Element | null | undefined) => Element | null | undefined\n    ) => {\n      let node: Element | null | undefined = clickedMenuItem;\n      while (getSibling(node) != null) {\n        node = getSibling(node);\n        if (isSidebarItemGroup(node)) {\n          const detailsElement = node?.shadowRoot?.querySelector('six-details');\n          if (detailsElement != null) {\n            detailsElement.open = false;\n          }\n        }\n      }\n    };\n\n    // close all previous siblings\n    closeAllSiblingsBySiblingProperty((node) => node?.previousElementSibling);\n    // close all further siblings\n    closeAllSiblingsBySiblingProperty((node) => node?.nextElementSibling);\n  };\n\n  private setupTogglableMenuItems() {\n    if (!this.toggled || this.sidebar == null) return;\n    this.markAllMenuItemsAsSelectableEmpty();\n    this.sidebar.addEventListener('six-details-show', this.closeSiblingDetailsOnShow);\n  }\n\n  private markAllMenuItemsAsSelectableEmpty() {\n    // when you have a toggled menu you also want to close other menu items when you click on an item without children\n    // nice benefit this item will then also be highlighted\n    const slot = this.sidebar?.querySelector('slot');\n    const nodes = slot?.assignedElements() || [];\n\n    // since we don't just want to make the top level empty menuItems selectable in toggled mode,\n    // but also nested items we need to traverse the whole menu item tree\n    const menuItems = [];\n    while (nodes.length > 0) {\n      const node = nodes.pop();\n      if (node?.shadowRoot == null) {\n        continue;\n      }\n\n      // collect six-details in the current shadowDOM\n      const menuItemsForCurrentNode = node.shadowRoot.querySelectorAll('six-details');\n      menuItems.push(...menuItemsForCurrentNode);\n\n      // collect all six-sidebar-item-group children of the current node to afterwards check their shadowDOM too\n      const newItemGroups = Array.from(node.children).filter(isSidebarItemGroup);\n      nodes.push(...newItemGroups);\n    }\n\n    menuItems.forEach((details) => (details.selectableEmpty = true));\n  }\n\n  /** Toggles whether the sidebar should be shown or hidden */\n  @Method()\n  async toggle() {\n    if (this.willShow || this.willHide) {\n      return;\n    }\n\n    if (this.open) {\n      await this.hide();\n    } else {\n      await this.show();\n    }\n  }\n\n  /** Shows the sidebar */\n  @Method()\n  async show() {\n    if (this.willShow) {\n      return;\n    }\n\n    const sixShow = this.sixShow.emit();\n    if (sixShow.defaultPrevented) {\n      this.open = false;\n      return;\n    }\n\n    this.willShow = true;\n    this.isVisible = true;\n    this.open = true;\n  }\n\n  /** Hides the sidebar */\n  @Method()\n  async hide() {\n    if (this.willHide) {\n      return;\n    }\n\n    const sixHide = this.sixHide.emit();\n    if (sixHide.defaultPrevented) {\n      this.open = true;\n      return;\n    }\n\n    this.willHide = true;\n    this.open = false;\n  }\n\n  /** Allows to select a menu item programmatically by index */\n  @Method()\n  async selectItemByIndex(index: number) {\n    if (this.sidebar == null) return;\n\n    const slot = this.sidebar.querySelector('slot');\n    const menuItemsOnRootLevel: HTMLSixDetailsElement[] = (slot?.assignedElements() || []).flatMap((el) => {\n      const detailsElement = el.shadowRoot?.querySelector('six-details');\n      if (detailsElement == null) {\n        return [];\n      }\n      return [detailsElement];\n    });\n    if (index < 0 || index > menuItemsOnRootLevel.length - 1) {\n      console.error(\n        `Tried to access sidebar menu item by index, but provided index out of range. Provided index: ${index}`\n      );\n      return;\n    }\n    await menuItemsOnRootLevel[index].show();\n  }\n\n  /** Allows to select a menu item programmatically by name */\n  @Method()\n  async selectItemByName(value: string) {\n    const slot = this.sidebar?.querySelector('slot');\n    const sidebarItemGroups = slot?.assignedElements() as HTMLSixSidebarItemGroupElement[];\n    if (sidebarItemGroups == null) {\n      return;\n    }\n\n    const indexOfSelectedElement = sidebarItemGroups.findIndex((el) => el?.name === value);\n    const selectedItem = sidebarItemGroups.at(indexOfSelectedElement)?.shadowRoot?.querySelector('six-details');\n    await selectedItem?.show();\n  }\n\n  private resetTransitionVariables() {\n    this.isVisible = this.open;\n    this.willShow = false;\n    this.willHide = false;\n    this.open ? this.sixAfterShow.emit() : this.sixAfterHide.emit();\n  }\n\n  render() {\n    return (\n      <host class=\"six-sidebar\">\n        <div\n          class={{\n            sidebar__container: true,\n            'sidebar--visible': this.isVisible,\n            'sidebar--open': this.open,\n            'sidebar--left': this.position === 'left',\n            'sidebar--right': this.position === 'right',\n          }}\n          style={{\n            width: this.width,\n            [`margin-${this.position}`]: this.open ? '0' : `calc(1rem - ${this.width})`,\n          }}\n          ref={(el) => (this.sidebar = el)}\n          aria-hidden={this.open ? 'false' : 'true'}\n          onTransitionEnd={this.handleTransitionEnd}\n        >\n          <slot />\n        </div>\n      </host>\n    );\n  }\n}\n","@import 'src/global/component';\n@import 'src/global/mixins/hidden';\n@import 'src/global/mixins/scrollbar';\n\n:host {\n  display: block;\n  height: 100%;\n}\n\n.sidebar {\n  &__container {\n    // scroll\n    height: 100%;\n    overflow: auto;\n\n    &.sidebar--open {\n      box-shadow: var(--six-elevation-1dp);\n      padding: 0 var(--six-spacing-small);\n    }\n\n    &:not(.sidebar--visible) {\n      @include hidden;\n    }\n  }\n\n  &--left {\n    color: var(--six-sidebar-color);\n    background-color: var(--six-sidebar-background-color);\n    // collapse\n    transition: var(--six-transition-medium) margin-left;\n    // six background\n    background-size: 300vw 70%;\n    background-position: bottom;\n    background-repeat: no-repeat;\n  }\n\n  &--right {\n    // collapse\n    transition: var(--six-transition-medium) margin-right;\n  }\n\n  // if the sidebar is embedded within six-root it cuts-off the border styling, for thus we need to guarante a margin\n  &--open {\n    &.sidebar--left {\n      margin-right: 2px;\n    }\n\n    &.sidebar--right {\n      margin-left: 2px;\n    }\n  }\n}\n","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}"],"names":["getOffset","element","parent","top","Math","round","getBoundingClientRect","left","locks","Set","lockBodyScrolling","lockingEl","add","document","body","classList","unlockBodyScrolling","delete","size","remove","scrollIntoView","container","direction","behavior","offset","offsetTop","scrollTop","offsetLeft","scrollLeft","minX","maxX","offsetWidth","minY","maxY","offsetHeight","scrollTo","clientWidth","clientHeight","isSidebarItemGroup","node","tagName","toLowerCase","SixSidebar","willShow","willHide","handleTransitionEnd","event","target","type","contains","resetTransitionVariables","closeSiblingDetailsOnShow","clickedMenuItem","sidebar","closeAllSiblingsBySiblingProperty","getSibling","detailsElement","shadowRoot","querySelector","open","previousElementSibling","nextElementSibling","this","show","hide","setupTogglableMenuItems","removeEventListener","toggled","markAllMenuItemsAsSelectableEmpty","addEventListener","slot","nodes","assignedElements","menuItems","length","pop","menuItemsForCurrentNode","querySelectorAll","push","newItemGroups","Array","from","children","filter","forEach","details","selectableEmpty","sixShow","emit","defaultPrevented","isVisible","sixHide","index","menuItemsOnRootLevel","flatMap","el","console","error","value","sidebarItemGroups","indexOfSelectedElement","findIndex","name","selectedItem","at","sixAfterShow","sixAfterHide","h","class","sidebar__container","position","style","width","ref","onTransitionEnd","_defineProperty","obj","key","Object","defineProperty","enumerable","configurable","writable"],"sourceRoot":""}