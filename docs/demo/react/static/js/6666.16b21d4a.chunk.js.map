{"version":3,"file":"static/js/6666.16b21d4a.chunk.js","mappings":"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","sources":["../../../libraries/ui-library/dist/esm/src/components/six-menu-item/six-menu-item.tsx","../../../libraries/ui-library/dist/esm/src/components/six-menu-item/six-menu-item.scss?tag=six-menu-item&encapsulation=shadow","../../../libraries/ui-library/dist/esm/src/utils/slot.ts"],"sourcesContent":["import { Component, h, Method, Prop, State } from '@stencil/core';\nimport { getTextContent } from '../../utils/slot';\n\n/**\n * @since 1.0\n * @status stable\n *\n * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.\n *\n * @slot - The menu item's label.\n * @slot prefix - Used to prepend an icon or similar element to the menu item.\n * @slot suffix - Used to append an icon or similar element to the menu item.\n *\n * @part base - The component's base wrapper.\n * @part checked-icon - The container that wraps the checked icon.\n * @part prefix - The prefix container.\n * @part label - The menu item label.\n * @part suffix - The suffix container.\n */\n\n@Component({\n  tag: 'six-menu-item',\n  styleUrl: 'six-menu-item.scss',\n  shadow: true,\n})\nexport class SixMenuItem {\n  private menuItem?: HTMLElement;\n  private defaultSlot?: HTMLSlotElement;\n\n  @State() hasFocus = false;\n\n  /** Set to true to draw the item in a checked state. */\n  @Prop({ reflect: true }) checked = false;\n\n  /** A unique value to store in the menu item. This can be used as a way to identify menu items when selected. */\n  @Prop({ reflect: true }) value = '';\n\n  /** Set to true to draw the menu item in a disabled state. */\n  @Prop({ reflect: true }) disabled = false;\n\n  connectedCallback() {\n    this.handleBlur = this.handleBlur.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n  }\n\n  /** Sets focus on the button. */\n  @Method()\n  async setFocus(options?: FocusOptions) {\n    this.menuItem?.focus(options);\n  }\n\n  /** Removes focus from the button. */\n  @Method()\n  async removeFocus() {\n    this.menuItem?.blur();\n  }\n\n  /** Returns a text label based on the contents of the menu item's default slot. */\n  @Method()\n  getTextLabel() {\n    return Promise.resolve(getTextContent(this.defaultSlot));\n  }\n\n  private handleBlur() {\n    this.hasFocus = false;\n  }\n\n  private handleFocus() {\n    this.hasFocus = true;\n  }\n\n  private handleMouseEnter() {\n    return this.setFocus();\n  }\n\n  private handleMouseLeave() {\n    return this.removeFocus();\n  }\n\n  render() {\n    return (\n      <div\n        ref={(el) => (this.menuItem = el)}\n        part=\"base\"\n        class={{\n          'menu-item': true,\n          'menu-item--checked': this.checked,\n          'menu-item--disabled': this.disabled,\n          'menu-item--focused': this.hasFocus,\n        }}\n        role=\"menuitem\"\n        aria-disabled={this.disabled ? 'true' : 'false'}\n        aria-checked={this.checked ? 'true' : 'false'}\n        tabIndex={!this.disabled ? 0 : undefined}\n        onFocus={this.handleFocus}\n        onBlur={this.handleBlur}\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <span part=\"prefix\" class=\"menu-item__prefix\">\n          <slot name=\"prefix\" />\n        </span>\n\n        <span part=\"label\" class=\"menu-item__label\">\n          <slot ref={(el) => (this.defaultSlot = el as HTMLSlotElement)} />\n        </span>\n\n        <span part=\"suffix\" class=\"menu-item__suffix\">\n          <slot name=\"suffix\" />\n        </span>\n\n        <span part=\"checked-icon\" class=\"menu-item__check\">\n          <six-icon size=\"small\" aria-hidden=\"true\">\n            check\n          </six-icon>\n        </span>\n      </div>\n    );\n  }\n}\n","@import 'src/global/component';\n\n:host {\n  display: block;\n}\n\n.menu-item {\n  position: relative;\n  display: flex;\n  align-items: stretch;\n  font-family: var(--six-font-sans);\n  font-size: var(--six-font-size-small);\n  font-weight: var(--six-font-weight-normal);\n  line-height: var(--six-line-height-normal);\n  letter-spacing: var(--six-letter-spacing-normal);\n  text-align: left;\n  color: var(--six-input-color);\n  border-radius: var(--six-border-radius-medium);\n  padding: var(--six-spacing-medium) var(--six-spacing-medium);\n  transition: var(--six-transition-fast) fill;\n  user-select: none;\n  white-space: nowrap;\n  cursor: pointer;\n\n  &.menu-item--focused:not(.menu-item--disabled) {\n    outline: none;\n    background-color: var(--six-menu-item-background-color);\n  }\n\n  &.menu-item--disabled {\n    outline: none;\n    color: var(--six-input-color-disabled);\n    cursor: not-allowed;\n  }\n\n  .menu-item__label {\n    flex: 1 1 auto;\n    align-self: center;\n  }\n\n  .menu-item__prefix {\n    flex: 0 0 auto;\n    display: flex;\n    align-items: center;\n\n    ::slotted(:last-child) {\n      margin-right: 0.5em;\n    }\n  }\n\n  .menu-item__suffix {\n    flex: 0 0 auto;\n    display: flex;\n    align-items: center;\n\n    ::slotted(:first-child) {\n      margin-left: 0.5em;\n    }\n  }\n\n  .menu-item__check {\n    flex: 0 0 auto;\n    display: flex;\n    align-items: center;\n    margin-left: var(--six-spacing-small);\n    visibility: hidden;\n    font-size: inherit;\n  }\n}\n\n.menu-item--checked .menu-item__check {\n  visibility: visible;\n}\n","//\n// Given a slot, this function iterates over all of its assigned text nodes and returns the concatenated text as a\n// string. This is useful because we can't use slot.textContent as an alternative.\n//\nexport function getTextContent(slot?: HTMLSlotElement): string {\n  const nodes = slot != null ? slot.assignedNodes({ flatten: true }) : [];\n  let text = '';\n\n  [...nodes].map((node) => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      text += node.textContent;\n    }\n  });\n\n  return text;\n}\n\n//\n// Determines whether an element has a slot. If name is specified, the function will look for a corresponding named\n// slot, otherwise it will look for a \"default\" slot (e.g. a non-empty text node or an element with no slot attribute).\n//\nexport function hasSlot(el: HTMLElement, name?: string): boolean {\n  // Look for a named slot\n  if (name != null && name !== '') {\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\n  }\n\n  // Look for a default slot\n  return Array.from(el.childNodes).some((node) => {\n    if (node.nodeType === node.TEXT_NODE && node.textContent?.trim() !== '') {\n      return true;\n    }\n\n    if (node.nodeType === node.ELEMENT_NODE) {\n      const el = node as HTMLElement;\n      if (!el.hasAttribute('slot')) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n}\n\nexport const getSlotChildren = <T extends HTMLElement>(el: HTMLElement) =>\n  el.querySelector('slot')?.assignedElements({ flatten: true }) as T[];\n\nexport function getSlot(element: ParentNode | null | undefined, slotName: string): HTMLElement | null {\n  if (element == null) return null;\n  return element.querySelector(`[slot=\"${slotName}\"]`);\n}\n"],"names":["SixMenuItem","this","handleBlur","bind","handleFocus","handleMouseEnter","handleMouseLeave","options","menuItem","focus","blur","Promise","resolve","getTextContent","defaultSlot","hasFocus","setFocus","removeFocus","h","ref","el","part","class","checked","disabled","role","tabIndex","undefined","onFocus","onBlur","onMouseEnter","onMouseLeave","name","size","slot","nodes","assignedNodes","flatten","text","map","node","nodeType","Node","TEXT_NODE","textContent","hasSlot","querySelector","Array","from","childNodes","some","trim","ELEMENT_NODE","hasAttribute","getSlotChildren","assignedElements","getSlot","element","slotName"],"sourceRoot":""}