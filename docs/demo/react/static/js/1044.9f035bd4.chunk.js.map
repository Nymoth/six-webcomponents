{"version":3,"file":"static/js/1044.9f035bd4.chunk.js","mappings":"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","sources":["../../../libraries/ui-library/dist/esm/src/utils/event-listeners.ts","../../../libraries/ui-library/dist/esm/src/utils/form.ts","../../../libraries/ui-library/dist/esm/src/functional-components/form-control/form-control.tsx","../../../libraries/ui-library/dist/esm/src/components/six-input/six-input.tsx","../../../libraries/ui-library/dist/esm/src/components/six-input/six-input.scss?tag=six-input&encapsulation=shadow","../../../libraries/ui-library/dist/esm/src/utils/slot.ts"],"sourcesContent":["interface EventListener {\n  el: GlobalEventHandlers;\n  name: string;\n  listener: EventListenerOrEventListenerObject;\n  identifier?: string | null;\n}\n\nexport class EventListeners {\n  eventListeners: EventListener[] = [];\n\n  add = <T extends GlobalEventHandlers>(\n    el: T,\n    name: string,\n    listener: EventListenerOrEventListenerObject,\n    identifier: string | null | undefined = null\n  ) => {\n    this.eventListeners.push({ el, name, listener, identifier });\n    el.addEventListener(name, listener);\n  };\n\n  remove = <T extends GlobalEventHandlers>(el: T, name: string, listener: EventListenerOrEventListenerObject) => {\n    this.eventListeners = this.getFilteredEventListeners(\n      (eventListener: EventListener) =>\n        eventListener.listener == listener && eventListener.el === el && eventListener.name === name\n    );\n  };\n\n  removeByIdentifier = (identifier: string) => {\n    const sameItem = (el: EventListener) => el.identifier === identifier;\n    const foundListener = this.eventListeners.find(sameItem) !== undefined;\n    if (!foundListener) {\n      return;\n    }\n    this.eventListeners = this.getFilteredEventListeners(sameItem);\n  };\n\n  private getFilteredEventListeners(sameItem: (el: EventListener) => boolean) {\n    return this.eventListeners.filter((item) => {\n      if (sameItem(item)) {\n        item.el.removeEventListener(item.name, item.listener);\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n\n  removeAll = () => {\n    while (this.eventListeners.length > 0) {\n      const eventListener: EventListener | undefined = this.eventListeners.pop();\n      if (eventListener != null) {\n        eventListener.el.removeEventListener(eventListener.name, eventListener.listener);\n      }\n    }\n  };\n\n  forward(from: string, to: 'input' | 'change' | 'blur' | 'focus', host: HTMLElement) {\n    switch (to) {\n      case 'input':\n        this.add(host, from, () => host.dispatchEvent(new InputEvent(to, { bubbles: true, cancelable: true })));\n        break;\n      case 'change':\n        this.add(host, from, () => host.dispatchEvent(new InputEvent(to, { bubbles: true, cancelable: true })));\n        break;\n      case 'blur':\n        this.add(host, from, () => host.dispatchEvent(new FocusEvent(to, { bubbles: true, cancelable: true })));\n        break;\n      case 'focus':\n        this.add(host, from, () => host.dispatchEvent(new FocusEvent(to, { bubbles: true, cancelable: true })));\n        break;\n    }\n  }\n}\n","export function submitForm(element: HTMLElement) {\n  const form = element.closest('form');\n  if (form != null) {\n    // Calling form.submit() would bypass the submit event and constraint validation.\n    // To prevent this, we inject a native submit button into the form, \"click\" it,\n    // then remove it to simulate a standard form submission.\n    const fakeButton = document.createElement('button');\n    fakeButton.type = 'submit';\n    fakeButton.style.display = 'none';\n    form.appendChild(fakeButton);\n    fakeButton.click();\n    fakeButton.remove();\n  }\n}\n","import { h, VNode } from '@stencil/core';\n\nexport interface FormControlProps {\n  /** The input id, used to map the input to the label */\n  inputId: string;\n\n  /** The size of the form control */\n  size: 'small' | 'medium' | 'large';\n\n  /** The label id, used to map the label to the input */\n  labelId?: string;\n\n  /** The label text (if the label slot isn't used) */\n  label?: string;\n\n  /** Whether a label slot has been provided. */\n  hasLabelSlot?: boolean;\n\n  /** The help text id, used to map the input to the help text */\n  helpTextId?: string;\n\n  /** The help text (if the help-text slot isn't used) */\n  helpText?: string;\n\n  /** Whether a help text slot has been provided. */\n  hasHelpTextSlot?: boolean;\n\n  /** Whether an error text slot has been provided. */\n  hasErrorTextSlot?: boolean;\n\n  /** The error text id, used to map the input to the help text */\n  errorTextId?: string;\n\n  /** The error text (if the error-text slot isn't used) */\n  errorText?: string | string[];\n\n  /** The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1 */\n  errorTextCount?: number;\n\n  /** Set to true to disable the input. */\n  disabled?: boolean;\n\n  /** Set if the value is required. */\n  required?: boolean;\n\n  /** Set if the error text is displayed. */\n  displayError?: boolean;\n\n  /** A function that gets called when the label is clicked. */\n  onLabelClick?: (event: MouseEvent) => void;\n}\n\nconst FormControl = (props: FormControlProps, children: VNode[]) => {\n  const errorMessages = (Array.isArray(props.errorText) ? props.errorText : [props.errorText]).filter(\n    (text) => text != null && text.trim() !== ''\n  );\n\n  const hasLabel = props.label != null && props.label.trim() !== '' ? true : props.hasLabelSlot ?? false;\n  const hasHelpText = props.helpText != null && props.helpText.trim() !== '' ? true : props.hasHelpTextSlot ?? false;\n  const hasErrorText = (errorMessages.length > 0 || (props.hasErrorTextSlot ?? false)) && (props.displayError ?? false);\n\n  return (\n    <div\n      part=\"form-control\"\n      class={{\n        'form-control': true,\n        'form-control--small': props.size === 'small',\n        'form-control--medium': props.size === 'medium',\n        'form-control--large': props.size === 'large',\n        'form-control--has-label': hasLabel,\n        'form-control--has-help-text': hasHelpText,\n        'form-control--has-error-text': hasErrorText,\n        'form-control--disabled': props.disabled ?? false,\n        'form-control--invalid': (props.displayError ?? false) && !props.disabled,\n      }}\n    >\n      <label\n        part=\"label\"\n        id={props.labelId}\n        class={{\n          'form-control__label': true,\n          'form-control__label__required': props.required ?? false,\n        }}\n        htmlFor={props.inputId}\n        aria-hidden={hasLabel ? 'false' : 'true'}\n        onClick={props.onLabelClick}\n      >\n        <slot name=\"label\">{props.label}</slot>\n      </label>\n\n      <div class=\"form-control__input\">{children}</div>\n\n      <div\n        part=\"error-text\"\n        id={props.errorTextId}\n        class=\"form-control__error-text\"\n        aria-hidden={hasErrorText ? 'false' : 'true'}\n      >\n        <slot name=\"error-text\">\n          {errorMessages.slice(0, props.errorTextCount ?? 1).map((text) => (\n            <six-error>{text}</six-error>\n          ))}\n        </slot>\n      </div>\n\n      <div\n        part=\"help-text\"\n        id={props.helpTextId}\n        class=\"form-control__help-text\"\n        aria-hidden={hasHelpText ? 'false' : 'true'}\n      >\n        <slot name=\"help-text\">{props.helpText}</slot>\n      </div>\n    </div>\n  );\n};\n\nexport default FormControl;\n","import { Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport FormControl from '../../functional-components/form-control/form-control';\nimport { hasSlot } from '../../utils/slot';\nimport { EmptyPayload } from '../../utils/types';\nimport { EventListeners } from '../../utils/event-listeners';\nimport { submitForm } from '../../utils/form';\n\nconst ICON_SIZES: Record<'small' | 'medium' | 'large', 'xSmall' | 'small' | 'medium'> = {\n  large: 'medium',\n  medium: 'small',\n  small: 'xSmall',\n};\n\nlet id = 0;\n\n/**\n * @since 1.0\n * @status stable\n *\n * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.\n *\n * @slot label - The input's label. Alternatively, you can use the label prop.\n * @slot prefix - Used to prepend an icon or similar element to the input.\n * @slot suffix - Used to append an icon or similar element to the input.\n * @slot clear-icon - An icon to use in lieu of the default clear icon.\n * @slot show-password-icon - An icon to use in lieu of the default show password icon.\n * @slot hide-password-icon - An icon to use in lieu of the default hide password icon.\n * @slot help-text - Help text that describes how to use the input. Alternatively, you can use the help-text prop.\n * @slot error-text - Error text that is shown when the status is set to invalid. Alternatively, you can use the error-text prop.\n *\n * @part base - The component's base wrapper.\n * @part form-control - The form control that wraps the label, input, error-text and help-text.\n * @part label - The input label.\n * @part input - The input control.\n * @part prefix - The input prefix container.\n * @part clear-button - The clear button.\n * @part password-toggle-button - The password toggle button.\n * @part suffix - The input suffix container.\n * @part help-text - The input help text.\n * @part error-text - The input error text.\n */\n\n@Component({\n  tag: 'six-input',\n  styleUrl: 'six-input.scss',\n  shadow: true,\n})\nexport class SixInput {\n  private inputId = `input-${++id}`;\n  private labelId = `input-label-${id}`;\n  private helpTextId = `input-help-text-${id}`;\n  private errorTextId = `input-error-text-${id}`;\n  private nativeInput?: HTMLInputElement;\n  private eventListeners = new EventListeners();\n\n  @Element() host!: HTMLSixInputElement;\n\n  @State() hasFocus = false;\n  @State() hasHelpTextSlot = false;\n  @State() hasLabelSlot = false;\n  @State() hasErrorSlot = false;\n  @State() isPasswordVisible = false;\n\n  /** The input's type. */\n  @Prop({ reflect: true }) type: 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url' = 'text';\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The input's name attribute. */\n  @Prop({ reflect: true }) name = '';\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true, reflect: true }) value = '';\n\n  /** Set to true to draw a pill-style input with rounded edges. */\n  @Prop({ reflect: true }) pill = false;\n\n  /** The input's help text. Alternatively, you can use the help-text slot. */\n  @Prop() helpText = '';\n\n  /** The input's placeholder text. */\n  @Prop() placeholder?: string;\n\n  /** Set to true to disable the input. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** Set to true to make the input readonly. */\n  @Prop({ reflect: true }) readonly = false;\n\n  /** The minimum length of input that will be considered valid. */\n  @Prop({ reflect: true }) minlength?: number;\n\n  /** The maximum length of input that will be considered valid. */\n  @Prop({ reflect: true }) maxlength?: number;\n\n  /** The input's minimum value. */\n  @Prop({ reflect: true }) min?: number;\n\n  /** The input's maximum value. */\n  @Prop({ reflect: true }) max?: number;\n\n  /** The input's step attribute. */\n  @Prop({ reflect: true }) step?: number;\n\n  /** A pattern to validate input against. */\n  @Prop({ reflect: true }) pattern?: string;\n\n  /** Set to true to show an asterisk beneath the label. */\n  @Prop() required = false;\n\n  /** The input's autocaptialize attribute. */\n  @Prop() autocapitalize = 'off';\n\n  /** The input's autocorrect attribute. */\n  @Prop() autocorrect: 'on' | 'off' = 'off';\n\n  /** The input's autocomplete attribute. */\n  @Prop() autocomplete = 'off';\n\n  /** The input's autofocus attribute. */\n  @Prop() autofocus = false;\n\n  /** Enables spell checking on the input. */\n  @Prop() spellcheck = false;\n\n  /** The label text. */\n  @Prop() label = '';\n\n  /** The error message shown, if `invalid` is set to true.  */\n  @Prop() errorText: string | string[] = '';\n\n  /** The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1 */\n  @Prop() errorTextCount?: number;\n\n  /** If this property is set to true and an error message is provided by `errorText`, the error message is displayed.  */\n  @Prop({ reflect: true }) invalid = false;\n\n  /** Set to true to add a clear button when the input is populated. */\n  @Prop() clearable = false;\n\n  /** Set to true to add a password toggle button for password inputs. */\n  @Prop() togglePassword = false;\n\n  /** The input's inputmode attribute. */\n  @Prop() inputmode?: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';\n\n  /** Set to render as line */\n  @Prop() line = false;\n\n  @Watch('helpText')\n  @Watch('errorText')\n  @Watch('label')\n  handleLabelChange() {\n    this.handleSlotChange();\n  }\n\n  @Watch('value')\n  handleValueChange() {\n    this.value = this.getValue();\n    if (this.nativeInput != null && this.nativeInput.value !== this.value) {\n      this.nativeInput.value = this.value;\n    }\n  }\n\n  /** Emitted when the control's value changes. Access the new value via event.target.value. */\n  @Event({ eventName: 'six-input-change' }) sixChange!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the clear button is activated. */\n  @Event({ eventName: 'six-input-clear' }) sixClear!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the control receives input. Access the new value via event.target.value.  */\n  @Event({ eventName: 'six-input-input' }) sixInput!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the control gains focus. */\n  @Event({ eventName: 'six-input-focus' }) sixFocus!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the control loses focus. Access the new value via event.target.value. */\n  @Event({ eventName: 'six-input-blur' }) sixBlur!: EventEmitter<EmptyPayload>;\n\n  connectedCallback() {\n    this.host.shadowRoot?.addEventListener('slotchange', this.handleSlotChange);\n    this.eventListeners.forward('six-input-input', 'input', this.host);\n    this.eventListeners.forward('six-input-change', 'change', this.host);\n    this.eventListeners.forward('six-input-focus', 'focus', this.host);\n    this.eventListeners.forward('six-input-blur', 'blur', this.host);\n  }\n\n  componentWillLoad() {\n    this.handleSlotChange();\n  }\n\n  disconnectedCallback() {\n    this.host.shadowRoot?.removeEventListener('slotchange', this.handleSlotChange);\n    this.eventListeners.removeAll();\n  }\n\n  /** Sets focus on the input. */\n  @Method()\n  async setFocus(options?: FocusOptions) {\n    this.nativeInput?.focus(options);\n  }\n\n  /** Removes focus from the input. */\n  @Method()\n  async removeFocus() {\n    this.nativeInput?.blur();\n  }\n\n  /** Selects all the text in the input. */\n  @Method()\n  async select() {\n    return this.nativeInput?.select();\n  }\n\n  /** Sets the start and end positions of the text selection (0-based). */\n  @Method()\n  async setSelectionRange(\n    selectionStart: number,\n    selectionEnd: number,\n    selectionDirection: 'forward' | 'backward' | 'none' = 'none'\n  ) {\n    return this.nativeInput?.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\n  }\n\n  /** Replaces a range of text with a new string. */\n  @Method()\n  async setRangeText(\n    replacement: string,\n    start: number,\n    end: number,\n    selectMode: 'select' | 'start' | 'end' | 'preserve' = 'preserve'\n  ) {\n    if (this.nativeInput == null) {\n      return;\n    }\n    this.nativeInput.setRangeText(replacement, start, end, selectMode);\n    if (this.getValue() !== this.nativeInput.value) {\n      this.value = this.nativeInput.value;\n      this.sixChange.emit();\n      this.sixInput.emit();\n    }\n  }\n\n  private handleChange = (event: Event) => {\n    event.stopPropagation();\n    if (this.nativeInput != null) {\n      this.value = this.nativeInput.value;\n      this.sixChange.emit();\n    }\n  };\n\n  private handleInput = (event: Event) => {\n    event.stopPropagation();\n    if (this.nativeInput != null) {\n      this.value = this.nativeInput.value;\n      this.sixInput.emit();\n    }\n  };\n\n  private handleBlur = () => {\n    this.hasFocus = false;\n    this.sixBlur.emit();\n  };\n\n  private handleFocus = () => {\n    this.hasFocus = true;\n    this.sixFocus.emit();\n  };\n\n  private handleClearClick = (event: MouseEvent) => {\n    this.value = '';\n    this.sixClear.emit();\n    this.sixInput.emit();\n    this.sixChange.emit();\n    if (this.nativeInput != null) {\n      this.nativeInput.focus();\n    }\n    event.stopPropagation();\n  };\n\n  private handleKeyDown = (event: KeyboardEvent) => {\n    const hasModifier = event.metaKey || event.ctrlKey || event.shiftKey || event.altKey;\n    if (event.key === 'Enter' && !hasModifier) {\n      setTimeout(() => {\n        if (!event.defaultPrevented && !event.isComposing) {\n          submitForm(this.host);\n        }\n      });\n    }\n  };\n\n  private handlePasswordToggle = () => {\n    this.isPasswordVisible = !this.isPasswordVisible;\n  };\n\n  private handleSlotChange = () => {\n    this.hasHelpTextSlot = hasSlot(this.host, 'help-text');\n    this.hasLabelSlot = hasSlot(this.host, 'label');\n    this.hasErrorSlot = hasSlot(this.host, 'error-text');\n  };\n\n  private getValue(): string {\n    return (this.value ?? '').toString();\n  }\n\n  render() {\n    return (\n      <FormControl\n        inputId={this.inputId}\n        label={this.label}\n        labelId={this.labelId}\n        hasLabelSlot={this.hasLabelSlot}\n        helpTextId={this.helpTextId}\n        helpText={this.helpText}\n        hasHelpTextSlot={this.hasHelpTextSlot}\n        errorTextId={this.errorTextId}\n        errorText={this.errorText}\n        errorTextCount={this.errorTextCount}\n        hasErrorTextSlot={this.hasErrorSlot}\n        size={this.size}\n        disabled={this.disabled}\n        required={this.required}\n        displayError={this.invalid}\n      >\n        <div\n          part=\"base\"\n          class={{\n            input: true,\n\n            // Sizes\n            'input--small': this.size === 'small',\n            'input--medium': this.size === 'medium',\n            'input--large': this.size === 'large',\n\n            // States\n            'input--line': this.line,\n            'input--pill': this.pill,\n            'input--disabled': this.disabled,\n            'input--focused': this.hasFocus,\n            'input--empty': this.getValue().length === 0,\n            'input--invalid': this.invalid,\n          }}\n        >\n          <span part=\"prefix\" class=\"input__prefix\">\n            <slot name=\"prefix\" />\n          </span>\n\n          <input\n            part=\"input\"\n            ref={(el) => (this.nativeInput = el)}\n            id={this.inputId}\n            size={1} // needed for firefox to overrule the default of 20\n            class={{\n              input__control: true,\n              input__control__prefix: hasSlot(this.host, 'prefix'),\n            }}\n            type={this.type === 'password' && this.isPasswordVisible ? 'text' : this.type}\n            name={this.name}\n            placeholder={this.placeholder}\n            disabled={this.disabled}\n            readonly={this.readonly}\n            minLength={this.minlength}\n            maxLength={this.maxlength}\n            min={this.min}\n            max={this.max}\n            step={this.step}\n            value={this.getValue()}\n            autoCapitalize={this.autocapitalize}\n            autoComplete={this.autocomplete}\n            autoCorrect={this.autocorrect}\n            autoFocus={this.autofocus}\n            spellcheck={this.spellcheck}\n            pattern={this.pattern}\n            required={this.required}\n            inputMode={this.inputmode}\n            aria-labelledby={this.labelId}\n            aria-describedby={this.helpTextId}\n            aria-invalid={this.invalid ? 'true' : 'false'}\n            onChange={this.handleChange}\n            onInput={this.handleInput}\n            onFocus={this.handleFocus}\n            onBlur={this.handleBlur}\n            onKeyDown={this.handleKeyDown}\n            data-testid=\"input-control\"\n          />\n\n          {this.clearable && (\n            <button\n              part=\"clear-button\"\n              class=\"input__clear\"\n              type=\"button\"\n              onClick={this.handleClearClick}\n              tabindex=\"-1\"\n              data-testid=\"input-clear-button\"\n            >\n              <slot name=\"clear-icon\">\n                <six-icon size={ICON_SIZES[this.size]}>clear</six-icon>\n              </slot>\n            </button>\n          )}\n\n          {this.togglePassword && (\n            <button\n              part=\"password-toggle-button\"\n              class=\"input__password-toggle\"\n              type=\"button\"\n              onClick={this.handlePasswordToggle}\n              tabindex=\"-1\"\n            >\n              {this.isPasswordVisible ? (\n                <slot name=\"show-password-icon\">\n                  <six-icon size={ICON_SIZES[this.size]}>visibility_off</six-icon>\n                </slot>\n              ) : (\n                <slot name=\"hide-password-icon\">\n                  <six-icon size={ICON_SIZES[this.size]}>visibility</six-icon>\n                </slot>\n              )}\n            </button>\n          )}\n\n          <span part=\"suffix\" class=\"input__suffix\">\n            <slot name=\"suffix\" />\n          </span>\n        </div>\n      </FormControl>\n    );\n  }\n}\n","@import 'src/global/component';\n@import '../../functional-components/form-control/form-control';\n\n:host {\n  display: block;\n}\n\n.input {\n  display: inline-flex;\n  align-items: stretch;\n  justify-content: start;\n  position: relative;\n  width: 100%;\n  font-family: var(--six-font-family);\n  font-weight: var(--six-input-font-weight);\n  letter-spacing: var(--six-input-letter-spacing);\n  background-color: var(--six-input-background-color);\n  border: solid var(--six-border-width) var(--six-input-border-color);\n  vertical-align: middle;\n  overflow: hidden;\n  transition: var(--six-transition-fast) color, var(--six-transition-fast) border, var(--six-transition-fast) box-shadow;\n  cursor: text;\n\n  &--line {\n    border: none;\n    border-bottom: solid var(--six-border-width) var(--six-input-border-color);\n  }\n\n  &:hover:not(.input--disabled) {\n    background-color: var(--six-input-background-color-hover);\n    border-color: var(--six-input-border-color-hover);\n\n    .input__control {\n      color: var(--six-input-color-hover);\n    }\n  }\n\n  &.input--focused:not(.input--disabled) {\n    background-color: var(--six-input-background-color-focus);\n\n    border-bottom-color: var(--six-input-border-color-focus);\n    box-shadow: 0 1px 0 0 var(--six-input-border-color-focus);\n\n    &:not(.input--line) {\n      border-color: var(--six-input-border-color-focus);\n      box-shadow: var(--six-input-focus-shadow);\n    }\n\n    .input__control {\n      color: var(--six-input-color-focus);\n    }\n  }\n\n  &.input--disabled {\n    background-color: var(--six-input-background-color-disabled);\n    border-color: var(--six-input-border-color-disabled);\n    cursor: not-allowed;\n\n    .input__control {\n      color: var(--six-input-color-disabled);\n\n      &::placeholder {\n        color: var(--six-input-placeholder-color-disabled);\n      }\n    }\n  }\n\n  &.input--invalid:not(.input--disabled):not(.input--focused) {\n    border-bottom-color: var(--six-input-border-color-danger);\n\n    &:not(.input--line) {\n      border-color: var(--six-input-border-color-danger);\n    }\n  }\n}\n\n.input__control {\n  flex: 1 1 auto;\n  font-family: inherit;\n  font-size: inherit;\n  font-weight: inherit;\n  min-width: 0;\n  color: var(--six-input-color);\n  border: none;\n  background: none;\n  box-shadow: none;\n  padding: 0;\n  margin: 0;\n  cursor: inherit;\n  -webkit-appearance: none;\n\n  &::-webkit-search-decoration,\n  &::-webkit-search-cancel-button,\n  &::-webkit-search-results-button,\n  &::-webkit-search-results-decoration {\n    -webkit-appearance: none;\n  }\n\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus,\n  &:-webkit-autofill:active {\n    box-shadow: 0 0 0 var(--six-height-large) var(--six-input-background-color-hover) inset !important;\n    -webkit-text-fill-color: var(--six-color-primary-500);\n  }\n\n  &::placeholder {\n    color: var(--six-input-placeholder-color);\n    user-select: none;\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &::-ms-reveal {\n    display: none;\n  }\n}\n\n.input__prefix,\n.input__suffix {\n  display: inline-flex;\n  flex: 0 0 auto;\n  align-items: center;\n  cursor: default;\n\n  ::slotted(six-icon) {\n    color: var(--six-input-icon-color);\n  }\n}\n\n.input {\n  &.input--disabled {\n    ::slotted(six-icon) {\n      cursor: not-allowed;\n    }\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Size modifiers\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n.input--small {\n  border-radius: var(--six-input-border-radius-small);\n  font-size: var(--six-input-font-size-small);\n  height: var(--six-height-small);\n\n  .input__control {\n    height: calc(var(--six-height-small) - var(--six-border-width) * 2);\n    margin: 0 var(--six-input-spacing-small);\n  }\n\n  .input__control__prefix {\n    margin: 0 var(--six-input-prefix-spacing-small);\n  }\n\n  .input__clear,\n  .input__password-toggle {\n    margin-right: var(--six-input-spacing-small);\n  }\n\n  .input__prefix ::slotted(*) {\n    margin-left: var(--six-input-prefix-spacing-small);\n  }\n\n  .input__suffix ::slotted(*) {\n    margin-right: var(--six-input-prefix-spacing-small);\n  }\n}\n\n.input--medium {\n  border-radius: var(--six-input-border-radius-medium);\n  font-size: var(--six-input-font-size-medium);\n  height: var(--six-height-medium);\n\n  .input__control {\n    height: calc(var(--six-height-medium) - var(--six-border-width) * 2);\n    margin: 0 var(--six-input-spacing-medium);\n  }\n\n  .input__control__prefix {\n    margin: 0 var(--six-input-prefix-spacing-medium);\n  }\n\n  .input__clear,\n  .input__password-toggle {\n    margin-right: var(--six-input-spacing-medium);\n  }\n\n  .input__prefix ::slotted(*) {\n    margin-left: var(--six-input-prefix-spacing-medium);\n  }\n\n  .input__suffix ::slotted(*) {\n    margin-right: var(--six-input-prefix-spacing-medium);\n  }\n}\n\n.input--large {\n  border-radius: var(--six-input-border-radius-large);\n  font-size: var(--six-input-font-size-large);\n  height: var(--six-height-large);\n\n  .input__control {\n    height: calc(var(--six-height-large) - var(--six-border-width) * 2);\n    margin: 0 var(--six-input-spacing-large);\n  }\n\n  .input__control__prefix {\n    margin: 0 var(--six-input-prefix-spacing-large);\n  }\n\n  .input__clear,\n  .input__password-toggle {\n    margin-right: var(--six-input-spacing-large);\n  }\n\n  .input__prefix ::slotted(*) {\n    margin-left: var(--six-input-prefix-spacing-large);\n  }\n\n  .input__suffix ::slotted(*) {\n    margin-right: var(--six-input-prefix-spacing-large);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Pill modifier\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n.input--pill {\n  &.input--small {\n    border-radius: var(--six-height-small);\n  }\n\n  &.input--medium {\n    border-radius: var(--six-height-medium);\n  }\n\n  &.input--large {\n    border-radius: var(--six-height-large);\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// Clearable + Password Toggle\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n.input__clear,\n.input__password-toggle {\n  display: inline-flex;\n  align-items: center;\n  font-size: inherit;\n  color: var(--six-input-icon-color);\n  border: none;\n  background: none;\n  padding: 0;\n  transition: var(--six-transition-fast) color;\n  cursor: pointer;\n\n  &:hover {\n    color: var(--six-input-icon-color-hover);\n  }\n\n  &:focus {\n    outline: none;\n  }\n}\n\n.input--empty .input__clear {\n  visibility: hidden;\n}\n","//\n// Given a slot, this function iterates over all of its assigned text nodes and returns the concatenated text as a\n// string. This is useful because we can't use slot.textContent as an alternative.\n//\nexport function getTextContent(slot?: HTMLSlotElement): string {\n  const nodes = slot != null ? slot.assignedNodes({ flatten: true }) : [];\n  let text = '';\n\n  [...nodes].map((node) => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      text += node.textContent;\n    }\n  });\n\n  return text;\n}\n\n//\n// Determines whether an element has a slot. If name is specified, the function will look for a corresponding named\n// slot, otherwise it will look for a \"default\" slot (e.g. a non-empty text node or an element with no slot attribute).\n//\nexport function hasSlot(el: HTMLElement, name?: string): boolean {\n  // Look for a named slot\n  if (name != null && name !== '') {\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\n  }\n\n  // Look for a default slot\n  return Array.from(el.childNodes).some((node) => {\n    if (node.nodeType === node.TEXT_NODE && node.textContent?.trim() !== '') {\n      return true;\n    }\n\n    if (node.nodeType === node.ELEMENT_NODE) {\n      const el = node as HTMLElement;\n      if (!el.hasAttribute('slot')) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n}\n\nexport const getSlotChildren = <T extends HTMLElement>(el: HTMLElement) =>\n  el.querySelector('slot')?.assignedElements({ flatten: true }) as T[];\n\nexport function getSlot(element: ParentNode | null | undefined, slotName: string): HTMLElement | null {\n  if (element == null) return null;\n  return element.querySelector(`[slot=\"${slotName}\"]`);\n}\n"],"names":["EventListeners","eventListeners","add","el","name","listener","identifier","push","addEventListener","remove","getFilteredEventListeners","eventListener","removeByIdentifier","sameItem","undefined","find","removeAll","length","pop","removeEventListener","this","filter","item","from","to","host","dispatchEvent","InputEvent","bubbles","cancelable","FocusEvent","submitForm","element","form","closest","fakeButton","document","createElement","type","style","display","appendChild","click","FormControl","props","children","errorMessages","Array","isArray","errorText","text","trim","hasLabel","label","hasLabelSlot","hasHelpText","helpText","hasHelpTextSlot","hasErrorText","hasErrorTextSlot","displayError","h","part","class","size","disabled","id","labelId","required","htmlFor","inputId","onClick","onLabelClick","errorTextId","slice","errorTextCount","map","helpTextId","ICON_SIZES","large","medium","small","SixInput","handleChange","event","stopPropagation","nativeInput","value","sixChange","emit","handleInput","sixInput","handleBlur","hasFocus","sixBlur","handleFocus","sixFocus","handleClearClick","sixClear","focus","handleKeyDown","hasModifier","metaKey","ctrlKey","shiftKey","altKey","key","setTimeout","defaultPrevented","isComposing","handlePasswordToggle","isPasswordVisible","handleSlotChange","hasSlot","hasErrorSlot","getValue","shadowRoot","forward","options","blur","select","selectionStart","selectionEnd","selectionDirection","setSelectionRange","replacement","start","end","selectMode","setRangeText","toString","invalid","input","line","pill","ref","input__control","input__control__prefix","placeholder","readonly","minLength","minlength","maxLength","maxlength","min","max","step","autoCapitalize","autocapitalize","autoComplete","autocomplete","autoCorrect","autocorrect","autoFocus","autofocus","spellcheck","pattern","inputMode","inputmode","onChange","onInput","onFocus","onBlur","onKeyDown","clearable","tabindex","togglePassword","getTextContent","slot","nodes","assignedNodes","flatten","node","nodeType","Node","TEXT_NODE","textContent","querySelector","childNodes","some","ELEMENT_NODE","hasAttribute","getSlotChildren","assignedElements","getSlot","slotName"],"sourceRoot":""}