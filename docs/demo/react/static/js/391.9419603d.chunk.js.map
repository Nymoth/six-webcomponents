{"version":3,"file":"static/js/391.9419603d.chunk.js","mappings":"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","sources":["../../../libraries/ui-library/dist/esm/src/utils/event-listeners.ts","../../../libraries/ui-library/dist/esm/src/functional-components/form-control/form-control.tsx","../../../libraries/ui-library/dist/esm/src/components/six-switch/six-switch.tsx","../../../libraries/ui-library/dist/esm/src/components/six-switch/six-switch.scss?tag=six-switch&encapsulation=shadow","../../../libraries/ui-library/dist/esm/src/utils/slot.ts"],"sourcesContent":["interface EventListener {\n  el: GlobalEventHandlers;\n  name: string;\n  listener: EventListenerOrEventListenerObject;\n  identifier?: string | null;\n}\n\nexport class EventListeners {\n  eventListeners: EventListener[] = [];\n\n  add = <T extends GlobalEventHandlers>(\n    el: T,\n    name: string,\n    listener: EventListenerOrEventListenerObject,\n    identifier: string | null | undefined = null\n  ) => {\n    this.eventListeners.push({ el, name, listener, identifier });\n    el.addEventListener(name, listener);\n  };\n\n  remove = <T extends GlobalEventHandlers>(el: T, name: string, listener: EventListenerOrEventListenerObject) => {\n    this.eventListeners = this.getFilteredEventListeners(\n      (eventListener: EventListener) =>\n        eventListener.listener == listener && eventListener.el === el && eventListener.name === name\n    );\n  };\n\n  removeByIdentifier = (identifier: string) => {\n    const sameItem = (el: EventListener) => el.identifier === identifier;\n    const foundListener = this.eventListeners.find(sameItem) !== undefined;\n    if (!foundListener) {\n      return;\n    }\n    this.eventListeners = this.getFilteredEventListeners(sameItem);\n  };\n\n  private getFilteredEventListeners(sameItem: (el: EventListener) => boolean) {\n    return this.eventListeners.filter((item) => {\n      if (sameItem(item)) {\n        item.el.removeEventListener(item.name, item.listener);\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n\n  removeAll = () => {\n    while (this.eventListeners.length > 0) {\n      const eventListener: EventListener | undefined = this.eventListeners.pop();\n      if (eventListener != null) {\n        eventListener.el.removeEventListener(eventListener.name, eventListener.listener);\n      }\n    }\n  };\n\n  forward(from: string, to: 'input' | 'change' | 'blur' | 'focus', host: HTMLElement) {\n    switch (to) {\n      case 'input':\n        this.add(host, from, () => host.dispatchEvent(new InputEvent(to, { bubbles: true, cancelable: true })));\n        break;\n      case 'change':\n        this.add(host, from, () => host.dispatchEvent(new InputEvent(to, { bubbles: true, cancelable: true })));\n        break;\n      case 'blur':\n        this.add(host, from, () => host.dispatchEvent(new FocusEvent(to, { bubbles: true, cancelable: true })));\n        break;\n      case 'focus':\n        this.add(host, from, () => host.dispatchEvent(new FocusEvent(to, { bubbles: true, cancelable: true })));\n        break;\n    }\n  }\n}\n","import { h, VNode } from '@stencil/core';\n\nexport interface FormControlProps {\n  /** The input id, used to map the input to the label */\n  inputId: string;\n\n  /** The size of the form control */\n  size: 'small' | 'medium' | 'large';\n\n  /** The label id, used to map the label to the input */\n  labelId?: string;\n\n  /** The label text (if the label slot isn't used) */\n  label?: string;\n\n  /** Whether a label slot has been provided. */\n  hasLabelSlot?: boolean;\n\n  /** The help text id, used to map the input to the help text */\n  helpTextId?: string;\n\n  /** The help text (if the help-text slot isn't used) */\n  helpText?: string;\n\n  /** Whether a help text slot has been provided. */\n  hasHelpTextSlot?: boolean;\n\n  /** Whether an error text slot has been provided. */\n  hasErrorTextSlot?: boolean;\n\n  /** The error text id, used to map the input to the help text */\n  errorTextId?: string;\n\n  /** The error text (if the error-text slot isn't used) */\n  errorText?: string | string[];\n\n  /** The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1 */\n  errorTextCount?: number;\n\n  /** Set to true to disable the input. */\n  disabled?: boolean;\n\n  /** Set if the value is required. */\n  required?: boolean;\n\n  /** Set if the error text is displayed. */\n  displayError?: boolean;\n\n  /** A function that gets called when the label is clicked. */\n  onLabelClick?: (event: MouseEvent) => void;\n}\n\nconst FormControl = (props: FormControlProps, children: VNode[]) => {\n  const errorMessages = (Array.isArray(props.errorText) ? props.errorText : [props.errorText]).filter(\n    (text) => text != null && text.trim() !== ''\n  );\n\n  const hasLabel = props.label != null && props.label.trim() !== '' ? true : props.hasLabelSlot ?? false;\n  const hasHelpText = props.helpText != null && props.helpText.trim() !== '' ? true : props.hasHelpTextSlot ?? false;\n  const hasErrorText = (errorMessages.length > 0 || (props.hasErrorTextSlot ?? false)) && (props.displayError ?? false);\n\n  return (\n    <div\n      part=\"form-control\"\n      class={{\n        'form-control': true,\n        'form-control--small': props.size === 'small',\n        'form-control--medium': props.size === 'medium',\n        'form-control--large': props.size === 'large',\n        'form-control--has-label': hasLabel,\n        'form-control--has-help-text': hasHelpText,\n        'form-control--has-error-text': hasErrorText,\n        'form-control--disabled': props.disabled ?? false,\n        'form-control--invalid': (props.displayError ?? false) && !props.disabled,\n      }}\n    >\n      <label\n        part=\"label\"\n        id={props.labelId}\n        class={{\n          'form-control__label': true,\n          'form-control__label__required': props.required ?? false,\n        }}\n        htmlFor={props.inputId}\n        aria-hidden={hasLabel ? 'false' : 'true'}\n        onClick={props.onLabelClick}\n      >\n        <slot name=\"label\">{props.label}</slot>\n      </label>\n\n      <div class=\"form-control__input\">{children}</div>\n\n      <div\n        part=\"error-text\"\n        id={props.errorTextId}\n        class=\"form-control__error-text\"\n        aria-hidden={hasErrorText ? 'false' : 'true'}\n      >\n        <slot name=\"error-text\">\n          {errorMessages.slice(0, props.errorTextCount ?? 1).map((text) => (\n            <six-error>{text}</six-error>\n          ))}\n        </slot>\n      </div>\n\n      <div\n        part=\"help-text\"\n        id={props.helpTextId}\n        class=\"form-control__help-text\"\n        aria-hidden={hasHelpText ? 'false' : 'true'}\n      >\n        <slot name=\"help-text\">{props.helpText}</slot>\n      </div>\n    </div>\n  );\n};\n\nexport default FormControl;\n","import { Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { EmptyPayload } from '../../utils/types';\nimport { EventListeners } from '../../utils/event-listeners';\nimport FormControl from '../../functional-components/form-control/form-control';\nimport { hasSlot } from '../../utils/slot';\n\nlet id = 0;\n\n/**\n * @since 1.0\n * @status stable\n *\n * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.\n *\n * @slot - The switch's label.\n * @slot error-text - Error text that is shown for validation errors. Alternatively, you can use the error-text prop.\n *\n * @part base - The component's base wrapper.\n * @part control - The switch control.\n * @part thumb - The switch position indicator.\n * @part label - The switch label.\n */\n\n@Component({\n  tag: 'six-switch',\n  styleUrl: 'six-switch.scss',\n  shadow: true,\n})\nexport class SixSwitch {\n  private switchId = `switch-${++id}`;\n  private labelId = `switch-label-${id}`;\n  private errorTextId = `input-error-text-${id}`;\n\n  private inputElement?: HTMLInputElement;\n  private eventListeners = new EventListeners();\n\n  @Element() host!: HTMLSixSwitchElement;\n\n  @State() hasFocus = false;\n  @State() hasErrorTextSlot = false;\n\n  /** The switch's name attribute. */\n  @Prop() name = '';\n\n  /** The switch's value attribute. */\n  @Prop() value = 'on';\n\n  /** Set to true to disable the switch. */\n  @Prop() disabled = false;\n\n  /** Set to true to show an asterisk beneath the label. */\n  @Prop() required = false;\n\n  /** Set to true to draw the switch in a checked state. */\n  @Prop({ mutable: true, reflect: true }) checked = false;\n\n  /** The label text. */\n  @Prop() label = '';\n\n  /** The error message shown, if `invalid` is set to true.  */\n  @Prop() errorText: string | string[] = '';\n\n  /** The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1 */\n  @Prop() errorTextCount?: number;\n\n  /** If this property is set to true and an error message is provided by `errorText`, the error message is displayed.  */\n  @Prop({ reflect: true }) invalid = false;\n\n  componentWillLoad() {\n    this.handleSlotChange();\n  }\n\n  @Watch('checked')\n  handleCheckedChange() {\n    if (this.inputElement != null) {\n      this.inputElement.checked = this.checked;\n      this.checked = this.inputElement.checked;\n    }\n  }\n\n  /** Emitted when the control loses focus. */\n  @Event({ eventName: 'six-switch-blur' }) sixBlur!: EventEmitter<boolean>;\n\n  /** Emitted when the control's checked state changes. */\n  @Event({ eventName: 'six-switch-change' }) sixChange!: EventEmitter<boolean>;\n\n  /** Emitted when the control gains focus. */\n  @Event({ eventName: 'six-switch-focus' }) sixFocus!: EventEmitter<EmptyPayload>;\n\n  connectedCallback() {\n    this.host.shadowRoot?.addEventListener('slotchange', this.handleSlotChange);\n    this.eventListeners.forward('six-switch-change', 'change', this.host);\n    this.eventListeners.forward('six-switch-blur', 'blur', this.host);\n    this.eventListeners.forward('six-switch-focus', 'focus', this.host);\n  }\n\n  disconnectedCallback() {\n    this.host.shadowRoot?.removeEventListener('slotchange', this.handleSlotChange);\n    this.eventListeners.removeAll();\n  }\n\n  @Watch('errorText')\n  @Watch('label')\n  handleLabelChange() {\n    this.handleSlotChange();\n  }\n\n  private handleSlotChange = () => {\n    this.hasErrorTextSlot = hasSlot(this.host, 'error-text');\n  };\n\n  /** Sets focus on the switch. */\n  @Method()\n  async setFocus(options?: FocusOptions) {\n    this.inputElement?.focus(options);\n  }\n\n  /** Removes focus from the switch. */\n  @Method()\n  async removeFocus() {\n    this.inputElement?.blur();\n  }\n\n  private handleClick = () => {\n    if (this.inputElement != null) {\n      this.checked = this.inputElement.checked;\n      this.sixChange.emit(this.checked);\n    }\n  };\n\n  private handleBlur = () => {\n    this.hasFocus = false;\n    this.sixBlur.emit(this.checked);\n  };\n\n  private handleFocus = () => {\n    this.hasFocus = true;\n    this.sixFocus.emit();\n  };\n\n  private handleKeyDown = (event: KeyboardEvent) => {\n    if (event.key === 'ArrowLeft') {\n      event.preventDefault();\n      this.checked = false;\n      this.sixChange.emit(this.checked);\n    }\n\n    if (event.key === 'ArrowRight') {\n      event.preventDefault();\n      this.checked = true;\n      this.sixChange.emit(this.checked);\n    }\n  };\n\n  private handleMouseDown = (event: MouseEvent) => {\n    // Prevent clicks on the label from briefly blurring the input\n    event.preventDefault();\n    this.inputElement?.focus();\n  };\n\n  render() {\n    return (\n      <FormControl\n        inputId={this.switchId}\n        label={this.label}\n        labelId={this.labelId}\n        hasLabelSlot={false}\n        errorTextId={this.errorTextId}\n        errorText={this.errorText}\n        errorTextCount={this.errorTextCount}\n        hasErrorTextSlot={this.hasErrorTextSlot}\n        size=\"medium\"\n        disabled={this.disabled}\n        required={this.required}\n        displayError={this.invalid}\n      >\n        <label\n          part=\"base\"\n          htmlFor={this.switchId}\n          class={{\n            switch: true,\n            'switch--checked': this.checked,\n            'switch--disabled': this.disabled,\n            'switch--focused': this.hasFocus,\n          }}\n          onMouseDown={this.handleMouseDown}\n        >\n          <span part=\"control\" class=\"switch__control\">\n            <span part=\"thumb\" class=\"switch__thumb\" />\n\n            <input\n              ref={(el) => (this.inputElement = el)}\n              id={this.switchId}\n              type=\"checkbox\"\n              name={this.name}\n              value={this.value}\n              checked={this.checked}\n              disabled={this.disabled}\n              required={this.required}\n              role=\"switch\"\n              aria-checked={this.checked ? 'true' : 'false'}\n              aria-labelledby={this.labelId}\n              onClick={this.handleClick}\n              onBlur={this.handleBlur}\n              onFocus={this.handleFocus}\n              onKeyDown={this.handleKeyDown}\n            />\n          </span>\n\n          <span part=\"label\" id={this.labelId} class=\"switch__label\">\n            <slot />\n          </span>\n        </label>\n      </FormControl>\n    );\n  }\n}\n","@import 'src/global/component';\n@import '../../functional-components/form-control/form-control';\n\n/**\n * @prop --width: The width of the switch.\n * @prop --height: The height of the switch.\n * @prop --thumb-size: The size of the thumb.\n */\n:host {\n  --height: var(--six-selection-control-toggle-size);\n  --thumb-size: calc(var(--six-selection-control-toggle-size) - 4px);\n  --width: calc(var(--height) * 2);\n\n  display: inline-block;\n}\n\n.switch {\n  display: inline-flex;\n  align-items: center;\n  font-family: var(--six-font-family);\n  font-size: var(--six-input-font-size-medium);\n  font-weight: var(--six-input-font-weight);\n  color: var(--six-input-color);\n  vertical-align: middle;\n  cursor: pointer;\n}\n\n.switch__control {\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: var(--width);\n  height: var(--height);\n  background-color: var(--six-selection-control-color-disabled);\n  border-radius: var(--height);\n  transition: var(--six-transition-fast) border-color, var(--six-transition-fast) background-color;\n\n  .switch__thumb {\n    width: var(--thumb-size);\n    height: var(--thumb-size);\n    background-color: var(--six-input-background-color);\n    border-radius: 50%;\n    transform: translateX(calc(var(--width) / -2 + var(--thumb-size) / 2 - (var(--thumb-size) - var(--height)) / 2));\n    transition: var(--six-transition-fast) transform ease, var(--six-transition-fast) background-color,\n      var(--six-transition-fast) border-color, var(--six-transition-fast) box-shadow;\n  }\n\n  input[type='checkbox'] {\n    position: absolute;\n    opacity: 0;\n    padding: 0;\n    margin: 0;\n    pointer-events: none;\n  }\n}\n\n// Hover\n.switch:not(.switch--checked):not(.switch--disabled) .switch__control:hover {\n  background-color: var(--six-input-border-color-hover);\n}\n\n// Checked\n.switch--checked .switch__control {\n  background-color: var(--six-selection-control-color);\n\n  .switch__thumb {\n    background-color: var(--six-color-white);\n    transform: translateX(calc(var(--width) / 2 - var(--thumb-size) / 2 + (var(--thumb-size) - var(--height)) / 2));\n  }\n}\n\n// Checked + hover\n.switch.switch--checked:not(.switch--disabled) .switch__control:hover {\n  background-color: var(--six-input-border-color-focus);\n}\n\n// Disabled\n.switch--disabled {\n  cursor: not-allowed;\n  color: var(--six-selection-control-color-disabled);\n\n  .switch__control {\n    background-color: var(--six-selection-control-color-disabled);\n  }\n\n  &.switch--checked .switch__control {\n    background-color: var(--six-selection-control-color-disabled);\n  }\n}\n\n.switch__label {\n  line-height: var(--height);\n  margin-left: 0.5em;\n  user-select: none;\n}\n","//\n// Given a slot, this function iterates over all of its assigned text nodes and returns the concatenated text as a\n// string. This is useful because we can't use slot.textContent as an alternative.\n//\nexport function getTextContent(slot?: HTMLSlotElement): string {\n  const nodes = slot != null ? slot.assignedNodes({ flatten: true }) : [];\n  let text = '';\n\n  [...nodes].map((node) => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      text += node.textContent;\n    }\n  });\n\n  return text;\n}\n\n//\n// Determines whether an element has a slot. If name is specified, the function will look for a corresponding named\n// slot, otherwise it will look for a \"default\" slot (e.g. a non-empty text node or an element with no slot attribute).\n//\nexport function hasSlot(el: HTMLElement, name?: string): boolean {\n  // Look for a named slot\n  if (name != null && name !== '') {\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\n  }\n\n  // Look for a default slot\n  return Array.from(el.childNodes).some((node) => {\n    if (node.nodeType === node.TEXT_NODE && node.textContent?.trim() !== '') {\n      return true;\n    }\n\n    if (node.nodeType === node.ELEMENT_NODE) {\n      const el = node as HTMLElement;\n      if (!el.hasAttribute('slot')) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n}\n\nexport const getSlotChildren = <T extends HTMLElement>(el: HTMLElement) =>\n  el.querySelector('slot')?.assignedElements({ flatten: true }) as T[];\n\nexport function getSlot(element: ParentNode | null | undefined, slotName: string): HTMLElement | null {\n  if (element == null) return null;\n  return element.querySelector(`[slot=\"${slotName}\"]`);\n}\n"],"names":["EventListeners","eventListeners","add","el","name","listener","identifier","push","addEventListener","remove","getFilteredEventListeners","eventListener","removeByIdentifier","sameItem","undefined","find","removeAll","length","pop","removeEventListener","this","filter","item","from","to","host","dispatchEvent","InputEvent","bubbles","cancelable","FocusEvent","FormControl","props","children","errorMessages","Array","isArray","errorText","text","trim","hasLabel","label","hasLabelSlot","hasHelpText","helpText","hasHelpTextSlot","hasErrorText","hasErrorTextSlot","displayError","h","part","class","size","disabled","id","labelId","required","htmlFor","inputId","onClick","onLabelClick","errorTextId","slice","errorTextCount","map","helpTextId","SixSwitch","switchId","handleSlotChange","hasSlot","handleClick","inputElement","checked","sixChange","emit","handleBlur","hasFocus","sixBlur","handleFocus","sixFocus","handleKeyDown","event","key","preventDefault","handleMouseDown","focus","shadowRoot","forward","options","blur","invalid","switch","onMouseDown","ref","type","value","role","onBlur","onFocus","onKeyDown","getTextContent","slot","nodes","assignedNodes","flatten","node","nodeType","Node","TEXT_NODE","textContent","querySelector","childNodes","some","ELEMENT_NODE","hasAttribute","getSlotChildren","assignedElements","getSlot","element","slotName"],"sourceRoot":""}