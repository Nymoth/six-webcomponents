{"version":3,"file":"static/js/3908.dcf40839.chunk.js","mappings":"wLAMA,IAAMA,EAAY,IAAIC,Q,IAsCTC,EAAe,CAC1BC,Q,SArCsBC,GACtB,GAAU,MAANA,EAAJ,CAEA,IAAMC,EAAO,CAAC,MAAO,UAAW,YAAa,YAAa,aAAc,OAAQ,MAAO,WAAY,UAC7FC,EAAK,SAACC,GACNF,EAAKG,SAASD,EAAME,MACtBL,EAAGM,UAAUC,IAAI,gB,EAGfC,EAAQ,WAAH,OAASR,EAAGM,UAAUG,OAAO,gBAAgB,EACxDb,EAAUc,IAAIV,EAAI,CAAEE,GAAAA,EAAIM,MAAAA,IAExBR,EAAGW,iBAAiB,UAAWT,GAC/BF,EAAGW,iBAAiB,QAAST,GAC7BF,EAAGW,iBAAiB,YAAaH,GACjCR,EAAGW,iBAAiB,YAAaH,EAdX,CAexB,EAsBEI,U,SApBwBZ,GACxB,GAAU,MAANA,EAAJ,CAEA,IAAMa,EAAWjB,EAAUkB,IAAId,GAE/B,GAAKa,EAAL,CAIA,IAAQX,EAAcW,EAAdX,GAAIM,EAAUK,EAAVL,MAEZR,EAAGM,UAAUG,OAAO,iBACpBT,EAAGe,oBAAoB,UAAWb,GAClCF,EAAGe,oBAAoB,QAASb,GAChCF,EAAGe,oBAAoB,YAAaP,GACpCR,EAAGe,oBAAoB,YAAaP,E,CAdd,CAexB,E,wHCzBaQ,EAAa,W,yDA2DhB,KAAAC,iBAAmB,SAACd,GACtB,EAAKe,WACPf,EAAMgB,iBACNhB,EAAMiB,kB,6BAvDmG,S,iCASzE,E,iBAyCnC,O,wCApCD,WACqB,MAAfC,KAAKC,QACPxB,EAAAA,EAAAA,QAAqBuB,KAAKC,O,GAE7B,kCAED,WACqB,MAAfD,KAAKC,QACPxB,EAAAA,EAAAA,UAAuBuB,KAAKC,O,GAE/B,oBAED,WAAM,WACEC,EAAOF,KAAKE,OAAQC,EAAAA,EAAAA,GAAAA,OAAAA,CAAMC,UAAWJ,KAAKE,OAEhD,OACEC,EAAAA,EAAAA,GAAAA,MAAAA,CAAKE,QAASL,KAAKJ,iBAAkBU,MAAO,CAAE,gCAAiCN,KAAKH,YAClFM,EAAAA,EAAAA,GAAAA,SAAAA,CACEI,IAAK,SAAC5B,GAAE,OAAM,EAAKsB,OAAStB,CAAE,EAC9B6B,KAAK,OACLX,SAAUG,KAAKH,SACfS,MAAO,CACL,eAAe,EACf,wBAAyBN,KAAKH,UAEhCY,KAAK,SAAQ,aACDT,KAAKU,QAEjBP,EAAAA,EAAAA,GAAAA,WAAAA,CAAA,cAAsB,OAAOQ,KAAMX,KAAKW,MACrCX,KAAKY,OAERT,EAAAA,EAAAA,GAAAA,OAAAA,MACCD,G,KAIR,EAzDuB,G,QCjBD,01C","sources":["../../../libraries/ui-library/dist/esm/src/utils/focus-visible.ts","../../../libraries/ui-library/dist/esm/src/components/six-icon-button/six-icon-button.tsx","../../../libraries/ui-library/dist/esm/src/components/six-icon-button/six-icon-button.scss?tag=six-icon-button&encapsulation=shadow"],"sourcesContent":["//\n// Simulates :focus-visible behavior on an element by watching for certain keyboard and mouse heuristics and toggling a\n// `focus-visible` class. Works at the component level so no global polyfill is necessary.\n//\n// This will eventually be removed pending better :focus-visible support: https://caniuse.com/#search=focus-visible\n//\nconst listeners = new WeakMap();\n\nexport function observe(el: HTMLElement) {\n  if (el == null) return;\n\n  const keys = ['Tab', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Home', 'End', 'PageDown', 'PageUp'];\n  const is = (event: KeyboardEvent) => {\n    if (keys.includes(event.key)) {\n      el.classList.add('focus-visible');\n    }\n  };\n  const isNot = () => el.classList.remove('focus-visible');\n  listeners.set(el, { is, isNot });\n\n  el.addEventListener('keydown', is);\n  el.addEventListener('keyup', is);\n  el.addEventListener('mousedown', isNot);\n  el.addEventListener('mousedown', isNot);\n}\n\nexport function unobserve(el: HTMLElement) {\n  if (el == null) return;\n\n  const listener = listeners.get(el);\n\n  if (!listener) {\n    return;\n  }\n\n  const { is, isNot } = listener;\n\n  el.classList.remove('focus-visible');\n  el.removeEventListener('keydown', is);\n  el.removeEventListener('keyup', is);\n  el.removeEventListener('mousedown', isNot);\n  el.removeEventListener('mousedown', isNot);\n}\n\nexport const focusVisible = {\n  observe,\n  unobserve,\n};\n","import { Component, h, Prop } from '@stencil/core';\nimport { focusVisible } from '../../utils/focus-visible';\n\n/**\n * @since 1.0\n * @status stable\n *\n * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.\n *\n * @part base - The component's base wrapper.\n */\n\n@Component({\n  tag: 'six-icon-button',\n  styleUrl: 'six-icon-button.scss',\n  shadow: true,\n})\nexport class SixIconButton {\n  private button?: HTMLButtonElement;\n\n  /** The name of the icon to draw. */\n  @Prop({ reflect: true }) name?: string;\n\n  /** The icon's size. */\n  @Prop({ reflect: true }) size: 'xSmall' | 'small' | 'medium' | 'large' | 'xLarge' | 'xxLarge' | 'xxxLarge' = 'medium';\n\n  /**\n   * A description that gets read by screen readers and other assistive devices. For optimal accessibility, you should\n   * always include a label that describes what the icon button does.\n   */\n  @Prop({ reflect: true }) label?: string;\n\n  /** Set to true to disable the button. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** HTML symbol code or entity. */\n  @Prop({ reflect: true }) html?: string;\n\n  componentDidLoad() {\n    if (this.button != null) {\n      focusVisible.observe(this.button);\n    }\n  }\n\n  disconnectedCallback() {\n    if (this.button != null) {\n      focusVisible.unobserve(this.button);\n    }\n  }\n\n  render() {\n    const html = this.html && <span innerHTML={this.html} />;\n\n    return (\n      <div onClick={this.handleClickEvent} class={{ 'icon-button-wrapper--disabled': this.disabled }}>\n        <button\n          ref={(el) => (this.button = el)}\n          part=\"base\"\n          disabled={this.disabled}\n          class={{\n            'icon-button': true,\n            'icon-button--disabled': this.disabled,\n          }}\n          type=\"button\"\n          aria-label={this.label}\n        >\n          <six-icon aria-hidden=\"true\" size={this.size}>\n            {this.name}\n          </six-icon>\n          <slot />\n          {html}\n        </button>\n      </div>\n    );\n  }\n\n  private handleClickEvent = (event: Event) => {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n}\n","@import 'src/global/component';\n\n:host {\n  display: inline-block;\n}\n\n.icon-button {\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  background: none;\n  border: none;\n  border-radius: var(--six-border-radius-medium);\n  font-size: inherit;\n  color: var(--six-input-icon-color);\n  padding: var(--six-spacing-x-small);\n  cursor: pointer;\n  transition: var(--six-transition-medium) color;\n  -webkit-appearance: none;\n\n  &:hover:not(.icon-button--disabled),\n  &:focus:not(.icon-button--disabled) {\n    color: var(--six-input-icon-color-hover);\n  }\n\n  &:active:not(.icon-button--disabled) {\n    color: var(--six-input-icon-color);\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &:focus-visible {\n    outline: var(--six-focus-ring);\n    outline-offset: var(--six-focus-ring-offset);\n  }\n}\n\n.icon-button--disabled {\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n.icon-button-wrapper--disabled {\n  cursor: not-allowed;\n}\n\n.icon-button ::slotted(six-badge) {\n  position: absolute;\n  top: 0;\n  right: 0;\n  pointer-events: none;\n}\n\n.icon-button six-icon[size='xLarge'] + ::slotted(six-badge) {\n  transform: translateY(40%) translateX(-35%);\n}\n\n.icon-button six-icon[size='large'] + ::slotted(six-badge) {\n  transform: translateY(20%) translateX(-20%);\n}\n\n// TODO: tx4u9 should be adjusted for all sizes after design team\n.icon-button six-icon[size='medium'] + ::slotted(six-badge) {\n  transform: translateY(10%) translateX(50%);\n}\n\n.icon-button six-icon[size='small'] + ::slotted(six-badge) {\n  //  no translation necessary\n}\n\n.icon-button six-icon[size='xSmall'] + ::slotted(six-badge) {\n  transform: translateY(-25%) translateX(25%);\n}\n"],"names":["listeners","WeakMap","focusVisible","observe","el","keys","is","event","includes","key","classList","add","isNot","remove","set","addEventListener","unobserve","listener","get","removeEventListener","SixIconButton","handleClickEvent","disabled","preventDefault","stopPropagation","this","button","html","h","innerHTML","onClick","class","ref","part","type","label","size","name"],"sourceRoot":""}