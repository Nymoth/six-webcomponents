{"version":3,"file":"static/js/9804.74e9f5c9.chunk.js","mappings":"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","sources":["../../../libraries/ui-library/dist/esm/src/functional-components/form-control/form-control.tsx","../../../libraries/ui-library/dist/esm/src/components/six-group-label/six-group-label.tsx","../../../libraries/ui-library/dist/esm/src/components/six-group-label/six-group-label.scss?tag=six-group-label&encapsulation=shadow","../../../libraries/ui-library/dist/esm/src/utils/slot.ts"],"sourcesContent":["import { h, VNode } from '@stencil/core';\n\nexport interface FormControlProps {\n  /** The input id, used to map the input to the label */\n  inputId: string;\n\n  /** The size of the form control */\n  size: 'small' | 'medium' | 'large';\n\n  /** The label id, used to map the label to the input */\n  labelId?: string;\n\n  /** The label text (if the label slot isn't used) */\n  label?: string;\n\n  /** Whether a label slot has been provided. */\n  hasLabelSlot?: boolean;\n\n  /** The help text id, used to map the input to the help text */\n  helpTextId?: string;\n\n  /** The help text (if the help-text slot isn't used) */\n  helpText?: string;\n\n  /** Whether a help text slot has been provided. */\n  hasHelpTextSlot?: boolean;\n\n  /** Whether an error text slot has been provided. */\n  hasErrorTextSlot?: boolean;\n\n  /** The error text id, used to map the input to the help text */\n  errorTextId?: string;\n\n  /** The error text (if the error-text slot isn't used) */\n  errorText?: string | string[];\n\n  /** The number of error texts to be shown (if the error-text slot isn't used). Defaults to 1 */\n  errorTextCount?: number;\n\n  /** Set to true to disable the input. */\n  disabled?: boolean;\n\n  /** Set if the value is required. */\n  required?: boolean;\n\n  /** Set if the error text is displayed. */\n  displayError?: boolean;\n\n  /** A function that gets called when the label is clicked. */\n  onLabelClick?: (event: MouseEvent) => void;\n}\n\nconst FormControl = (props: FormControlProps, children: VNode[]) => {\n  const errorMessages = (Array.isArray(props.errorText) ? props.errorText : [props.errorText]).filter(\n    (text) => text != null && text.trim() !== ''\n  );\n\n  const hasLabel = props.label != null && props.label.trim() !== '' ? true : props.hasLabelSlot ?? false;\n  const hasHelpText = props.helpText != null && props.helpText.trim() !== '' ? true : props.hasHelpTextSlot ?? false;\n  const hasErrorText = (errorMessages.length > 0 || (props.hasErrorTextSlot ?? false)) && (props.displayError ?? false);\n\n  return (\n    <div\n      part=\"form-control\"\n      class={{\n        'form-control': true,\n        'form-control--small': props.size === 'small',\n        'form-control--medium': props.size === 'medium',\n        'form-control--large': props.size === 'large',\n        'form-control--has-label': hasLabel,\n        'form-control--has-help-text': hasHelpText,\n        'form-control--has-error-text': hasErrorText,\n        'form-control--disabled': props.disabled ?? false,\n        'form-control--invalid': (props.displayError ?? false) && !props.disabled,\n      }}\n    >\n      <label\n        part=\"label\"\n        id={props.labelId}\n        class={{\n          'form-control__label': true,\n          'form-control__label__required': props.required ?? false,\n        }}\n        htmlFor={props.inputId}\n        aria-hidden={hasLabel ? 'false' : 'true'}\n        onClick={props.onLabelClick}\n      >\n        <slot name=\"label\">{props.label}</slot>\n      </label>\n\n      <div class=\"form-control__input\">{children}</div>\n\n      <div\n        part=\"error-text\"\n        id={props.errorTextId}\n        class=\"form-control__error-text\"\n        aria-hidden={hasErrorText ? 'false' : 'true'}\n      >\n        <slot name=\"error-text\">\n          {errorMessages.slice(0, props.errorTextCount ?? 1).map((text) => (\n            <six-error>{text}</six-error>\n          ))}\n        </slot>\n      </div>\n\n      <div\n        part=\"help-text\"\n        id={props.helpTextId}\n        class=\"form-control__help-text\"\n        aria-hidden={hasHelpText ? 'false' : 'true'}\n      >\n        <slot name=\"help-text\">{props.helpText}</slot>\n      </div>\n    </div>\n  );\n};\n\nexport default FormControl;\n","import { Component, Element, h, Prop, State, Watch } from '@stencil/core';\nimport FormControl from '../../functional-components/form-control/form-control';\nimport { hasSlot } from '../../utils/slot';\n\nlet id = 0;\n\n/**\n * @since 1.1\n * @status stable\n *\n * @slot label - The wrapped component's label. Alternatively, you can use the label prop.\n * @slot help-text - Help text that describes how to use the input.\n * @slot error-text - Error text that is shown for validation errors. Alternatively, you can use the error-text prop.\n *\n * @part base - The component's base wrapper.\n * @part form-control - The form control that wraps the label, textarea, and help text.\n * @part label - The label of wrapped component.\n * @part help-text - The help text of the wrapped component.\n */\n@Component({\n  tag: 'six-group-label',\n  styleUrl: 'six-group-label.scss',\n  shadow: true,\n})\nexport class SixGroupLabel {\n  private wrapperLabelId = `label-${++id}`;\n  private labelId = `label-label-${id}`;\n  private helpTextId = `label-help-text-${id}`;\n\n  @Element() host!: HTMLSixGroupLabelElement;\n\n  @State() hasHelpTextSlot = false;\n  @State() hasLabelSlot = false;\n\n  /** The label's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The wrapper label's label. Alternatively, you can use the label slot. */\n  @Prop() label = '';\n\n  /** The wrapper label's help text. Alternatively, you can use the help-text slot. */\n  @Prop() helpText = '';\n\n  /** Set to true to disable the label. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** Set to true to show an asterisk beneath the label. */\n  @Prop() required = false;\n\n  @Watch('helpText')\n  @Watch('label')\n  handleLabelChange() {\n    this.handleSlotChange();\n  }\n\n  connectedCallback() {\n    this.host.shadowRoot?.addEventListener('slotchange', this.handleSlotChange);\n  }\n\n  componentWillLoad() {\n    this.handleSlotChange();\n  }\n\n  disconnectedCallback() {\n    this.host.shadowRoot?.removeEventListener('slotchange', this.handleSlotChange);\n  }\n\n  private handleSlotChange = () => {\n    this.hasLabelSlot = hasSlot(this.host, 'label');\n    this.hasHelpTextSlot = hasSlot(this.host, 'help-text');\n  };\n\n  render() {\n    return (\n      <FormControl\n        inputId={this.wrapperLabelId}\n        label={this.label}\n        labelId={this.labelId}\n        hasLabelSlot={this.hasLabelSlot}\n        helpTextId={this.helpTextId}\n        helpText={this.helpText}\n        hasHelpTextSlot={this.hasHelpTextSlot}\n        size={this.size}\n        disabled={this.disabled}\n        required={this.required}\n      >\n        <slot></slot>\n      </FormControl>\n    );\n  }\n}\n","@import 'src/global/component';\n@import '../../functional-components/form-control/form-control';\n\n:host {\n  display: block;\n}\n","//\n// Given a slot, this function iterates over all of its assigned text nodes and returns the concatenated text as a\n// string. This is useful because we can't use slot.textContent as an alternative.\n//\nexport function getTextContent(slot?: HTMLSlotElement): string {\n  const nodes = slot != null ? slot.assignedNodes({ flatten: true }) : [];\n  let text = '';\n\n  [...nodes].map((node) => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      text += node.textContent;\n    }\n  });\n\n  return text;\n}\n\n//\n// Determines whether an element has a slot. If name is specified, the function will look for a corresponding named\n// slot, otherwise it will look for a \"default\" slot (e.g. a non-empty text node or an element with no slot attribute).\n//\nexport function hasSlot(el: HTMLElement, name?: string): boolean {\n  // Look for a named slot\n  if (name != null && name !== '') {\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\n  }\n\n  // Look for a default slot\n  return Array.from(el.childNodes).some((node) => {\n    if (node.nodeType === node.TEXT_NODE && node.textContent?.trim() !== '') {\n      return true;\n    }\n\n    if (node.nodeType === node.ELEMENT_NODE) {\n      const el = node as HTMLElement;\n      if (!el.hasAttribute('slot')) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n}\n\nexport const getSlotChildren = <T extends HTMLElement>(el: HTMLElement) =>\n  el.querySelector('slot')?.assignedElements({ flatten: true }) as T[];\n\nexport function getSlot(element: ParentNode | null | undefined, slotName: string): HTMLElement | null {\n  if (element == null) return null;\n  return element.querySelector(`[slot=\"${slotName}\"]`);\n}\n"],"names":["FormControl","props","children","errorMessages","Array","isArray","errorText","filter","text","trim","hasLabel","label","hasLabelSlot","hasHelpText","helpText","hasHelpTextSlot","hasErrorText","length","hasErrorTextSlot","displayError","h","part","class","size","disabled","id","labelId","required","htmlFor","inputId","onClick","onLabelClick","name","errorTextId","slice","errorTextCount","map","helpTextId","SixGroupLabel","wrapperLabelId","handleSlotChange","hasSlot","host","this","shadowRoot","addEventListener","removeEventListener","getTextContent","slot","nodes","assignedNodes","flatten","node","nodeType","Node","TEXT_NODE","textContent","el","querySelector","from","childNodes","some","ELEMENT_NODE","hasAttribute","getSlotChildren","assignedElements","getSlot","element","slotName"],"sourceRoot":""}