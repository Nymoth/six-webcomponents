{"version":3,"file":"static/js/2114.59409608.chunk.js","mappings":"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","sources":["../../../libraries/ui-library/dist/esm/src/utils/support.ts","../../../libraries/ui-library/dist/esm/src/utils/modal.ts","../../../libraries/ui-library/dist/esm/src/utils/scroll.ts","../../../libraries/ui-library/dist/esm/src/utils/offset.ts","../../../libraries/ui-library/dist/esm/src/components/six-drawer/six-drawer.tsx","../../../libraries/ui-library/dist/esm/src/components/six-drawer/six-drawer.scss?tag=six-drawer&encapsulation=shadow","../../../libraries/ui-library/dist/esm/src/utils/slot.ts"],"sourcesContent":["//\n// Determines if the browser supports focus({ preventScroll })\n//\nexport const isPreventScrollSupported = () => {\n  let supported = false;\n\n  const element = document.createElement('div');\n  element.focus &&\n    element.focus({\n      get preventScroll() {\n        supported = true;\n        return false;\n      },\n    });\n\n  return supported;\n};\n","interface ModalOptions {\n  onFocusOut?: (event: Event) => void;\n}\n\nlet activeModals: HTMLElement[] = [];\n\nexport default class Modal {\n  element: HTMLElement;\n  options?: ModalOptions;\n\n  constructor(element: HTMLElement, options?: ModalOptions) {\n    this.element = element;\n    this.options = options;\n    this.handleFocusIn = this.handleFocusIn.bind(this);\n  }\n\n  activate() {\n    activeModals.push(this.element);\n    document.addEventListener('focusin', this.handleFocusIn);\n  }\n\n  deactivate() {\n    activeModals = activeModals.filter((modal) => modal !== this.element);\n    document.removeEventListener('focusin', this.handleFocusIn);\n  }\n\n  isActive() {\n    // The \"active\" modal is always the most recent one shown\n    return activeModals[activeModals.length - 1] === this.element;\n  }\n\n  handleFocusIn(event: Event) {\n    const target = event.target as HTMLElement;\n    const tagName = this.element.tagName.toLowerCase();\n\n    // If focus is lost while the modal is active, run the onFocusOut callback\n    if (this.isActive() && target.closest(tagName) !== this.element && typeof this.options?.onFocusOut === 'function') {\n      this.options?.onFocusOut(event);\n    }\n  }\n}\n","import { getOffset } from './offset';\n\nconst locks = new Set();\n\n//\n// Prevents body scrolling. Keeps track of which elements requested a lock so multiple levels of locking are possible\n// without premature unlocking.\n//\nexport function lockBodyScrolling(lockingEl: HTMLElement) {\n  locks.add(lockingEl);\n  document.body.classList.add('six-scroll-lock');\n}\n\n//\n// Unlocks body scrolling. Scrolling will only be unlocked once all elements that requested a lock call this method.\n//\nexport function unlockBodyScrolling(lockingEl: HTMLElement) {\n  locks.delete(lockingEl);\n\n  if (locks.size === 0) {\n    document.body.classList.remove('six-scroll-lock');\n  }\n}\n\n//\n// Scrolls an element into view of its container. If the element is already in view, nothing will happen.\n//\nexport function scrollIntoView(\n  element: HTMLElement,\n  container: HTMLElement,\n  direction: 'horizontal' | 'vertical' | 'both' = 'vertical',\n  behavior: 'smooth' | 'auto' = 'smooth'\n) {\n  const offset = getOffset(element, container);\n  const offsetTop = offset.top + container.scrollTop;\n  const offsetLeft = offset.left + container.scrollLeft;\n  const minX = container.scrollLeft;\n  const maxX = container.scrollLeft + container.offsetWidth;\n  const minY = container.scrollTop;\n  const maxY = container.scrollTop + container.offsetHeight;\n\n  if (direction === 'horizontal' || direction === 'both') {\n    if (offsetLeft < minX) {\n      container.scrollTo({ left: offsetLeft, behavior });\n    } else if (offsetLeft + element.clientWidth > maxX) {\n      container.scrollTo({ left: offsetLeft - container.offsetWidth + element.clientWidth, behavior });\n    }\n  }\n\n  if (direction === 'vertical' || direction === 'both') {\n    if (offsetTop < minY) {\n      container.scrollTo({ top: offsetTop, behavior });\n    } else if (offsetTop + element.clientHeight > maxY) {\n      container.scrollTo({ top: offsetTop - container.offsetHeight + element.clientHeight, behavior });\n    }\n  }\n}\n","//\n// Returns an element's offset relative to its parent. Similar to element.offsetTop and element.offsetLeft, except the\n// parent doesn't have to be positioned relative or absolute.\n//\n// NOTE: This was created to work around what appears to be a bug in Chrome where a slotted element's offsetParent\n// seems to ignore elements inside the surrounding shadow DOM: https://bugs.chromium.org/p/chromium/issues/detail?id=920069\n//\nexport function getOffset(element: HTMLElement, parent: HTMLElement) {\n  return {\n    top: Math.round(element.getBoundingClientRect().top - parent.getBoundingClientRect().top),\n    left: Math.round(element.getBoundingClientRect().left - parent.getBoundingClientRect().left),\n  };\n}\n","import { Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { lockBodyScrolling, unlockBodyScrolling } from '../../utils/scroll';\nimport { hasSlot } from '../../utils/slot';\nimport { isPreventScrollSupported } from '../../utils/support';\nimport Modal from '../../utils/modal';\nimport { EmptyPayload } from '../../utils/types';\n\nconst hasPreventScroll = isPreventScrollSupported();\nlet id = 0;\n\n/**\n * @since 1.0\n * @status stable\n *\n * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.\n *\n * @slot - The drawer's content.\n * @slot label - The drawer's label. Alternatively, you can use the label prop.\n * @slot footer - The drawer's footer, usually one or more buttons representing various options.\n *\n * @part base - The component's base wrapper.\n * @part overlay - The overlay.\n * @part panel - The drawer panel (where the drawer and its content is rendered).\n * @part header - The drawer header.\n * @part title - The drawer title.\n * @part close-button - The close button.\n * @part body - The drawer body.\n * @part footer - The drawer footer.\n */\n\n@Component({\n  tag: 'six-drawer',\n  styleUrl: 'six-drawer.scss',\n  shadow: true,\n})\nexport class SixDrawer {\n  private componentId = `drawer-${++id}`;\n  private drawer?: HTMLElement;\n  private modal?: Modal;\n  private panel?: HTMLElement;\n  private willShow = false;\n  private willHide = false;\n\n  @Element() host!: HTMLSixDrawerElement;\n\n  @State() hasFooter = false;\n  @State() isVisible = false;\n\n  /** Indicates whether the drawer is open. You can use this in lieu of the show/hide methods. */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  /**\n   * The drawer's label as displayed in the header. You should always include a relevant label even when using\n   * `no-header`, as it is required for proper accessibility.\n   */\n  @Prop() label = '';\n\n  /** The direction from which the drawer will open. */\n  @Prop() placement: 'top' | 'right' | 'bottom' | 'left' = 'right';\n\n  /**\n   * By default, the drawer slides out of its containing block (usually the viewport). To make the drawer slide out of\n   * its parent element, set this prop and add `position: relative` to the parent.\n   */\n  @Prop() contained = false;\n\n  /**\n   * Removes the header. This will also remove the default close button, so please ensure you provide an easy,\n   * accessible way for users to dismiss the drawer.\n   */\n  @Prop() noHeader = false;\n\n  @Watch('open')\n  handleOpenChange() {\n    this.open ? this.show() : this.hide();\n  }\n\n  /** Emitted when the drawer opens. Calling `event.preventDefault()` will prevent it from being opened. */\n  @Event({ eventName: 'six-drawer-show' }) sixShow!: EventEmitter<EmptyPayload>;\n\n  /** Emitted after the drawer opens and all transitions are complete. */\n  @Event({ eventName: 'six-drawer-after-show' }) sixAfterShow!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the drawer closes. Calling `event.preventDefault()` will prevent it from being closed. */\n  @Event({ eventName: 'six-drawer-hide' }) sixHide!: EventEmitter<EmptyPayload>;\n\n  /** Emitted after the drawer closes and all transitions are complete. */\n  @Event({ eventName: 'six-drawer-after-hide' }) sixAfterHide!: EventEmitter<EmptyPayload>;\n\n  /**\n   * Emitted when the drawer opens and the panel gains focus. Calling `event.preventDefault()` will prevent focus and\n   * allow you to set it on a different element in the drawer, such as an input or button.\n   */\n  @Event({ eventName: 'six-drawer-initial-focus' }) sixInitialFocus!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the overlay is clicked. Calling `event.preventDefault()` will prevent the drawer from closing. */\n  @Event({ eventName: 'six-drawer-overlay-dismiss' }) sixOverlayDismiss!: EventEmitter<EmptyPayload>;\n\n  connectedCallback() {\n    this.modal = new Modal(this.host, {\n      onFocusOut: () => (this.contained ? null : this.panel?.focus()),\n    });\n  }\n\n  componentWillLoad() {\n    this.handleSlotChange();\n\n    // Show on init if open\n    if (this.open) {\n      this.show();\n      // if the sidebar is open by default we need to manually reset the\n      // transition variables since there will be no transition event\n      this.resetTransitionVariables();\n    }\n  }\n\n  disconnectedCallback() {\n    unlockBodyScrolling(this.host);\n  }\n\n  /** Shows the drawer */\n  @Method()\n  async show() {\n    if (this.willShow || this.modal == null || this.panel == null || this.drawer == null) {\n      return;\n    }\n    const panel = this.panel;\n\n    const sixShow = this.sixShow.emit();\n    if (sixShow.defaultPrevented) {\n      this.open = false;\n      return;\n    }\n\n    this.willShow = true;\n    this.isVisible = true;\n    this.open = true;\n\n    // Lock body scrolling only if the drawer isn't contained\n    if (!this.contained) {\n      this.modal.activate();\n      lockBodyScrolling(this.host);\n    }\n\n    if (this.open) {\n      if (hasPreventScroll) {\n        // Wait for the next frame before setting initial focus so the dialog is technically visible\n        requestAnimationFrame(() => {\n          const sixInitialFocus = this.sixInitialFocus.emit();\n          if (!sixInitialFocus.defaultPrevented) {\n            panel.focus({ preventScroll: true });\n          }\n        });\n      } else {\n        // Once Safari supports { preventScroll: true } we can remove this nasty little hack, but until then we need to\n        // wait for the transition to complete before setting focus, otherwise the panel may render in a buggy way its\n        // out of view initially.\n        //\n        // Fiddle: https://jsfiddle.net/g6buoafq/1/\n        // Safari: https://bugs.webkit.org/show_bug.cgi?id=178583\n        //\n        this.drawer.addEventListener(\n          'transitionend',\n          () => {\n            const sixInitialFocus = this.sixInitialFocus.emit();\n            if (!sixInitialFocus.defaultPrevented) {\n              panel.focus();\n            }\n          },\n          { once: true }\n        );\n      }\n    }\n  }\n\n  /** Hides the drawer */\n  @Method()\n  async hide() {\n    if (this.willHide || this.modal == null) {\n      return;\n    }\n\n    const sixHide = this.sixHide.emit();\n    if (sixHide.defaultPrevented) {\n      this.open = true;\n      return;\n    }\n\n    this.willHide = true;\n    this.open = false;\n    this.modal.deactivate();\n\n    unlockBodyScrolling(this.host);\n  }\n\n  private handleCloseClick = () => {\n    this.hide();\n  };\n\n  private handleKeyDown = (event: KeyboardEvent) => {\n    if (event.key === 'Escape') {\n      this.hide();\n    }\n  };\n\n  private handleOverlayClick = () => {\n    const sixOverlayDismiss = this.sixOverlayDismiss.emit();\n\n    if (!sixOverlayDismiss.defaultPrevented) {\n      this.hide();\n    }\n  };\n\n  private handleSlotChange = () => {\n    this.hasFooter = hasSlot(this.host, 'footer');\n  };\n\n  private handleTransitionEnd = (event: TransitionEvent) => {\n    const target = event.target as HTMLElement;\n\n    // Ensure we only emit one event when the target element is no longer visible\n    if (event.propertyName === 'transform' && target.classList.contains('drawer__panel')) {\n      this.resetTransitionVariables();\n    }\n  };\n\n  private resetTransitionVariables() {\n    this.isVisible = this.open;\n    this.willShow = false;\n    this.willHide = false;\n    this.open ? this.sixAfterShow.emit() : this.sixAfterHide.emit();\n  }\n\n  render() {\n    return (\n      <div\n        ref={(el) => (this.drawer = el)}\n        part=\"base\"\n        class={{\n          drawer: true,\n          'drawer--open': this.open,\n          'drawer--visible': this.isVisible,\n          'drawer--top': this.placement === 'top',\n          'drawer--right': this.placement === 'right',\n          'drawer--bottom': this.placement === 'bottom',\n          'drawer--left': this.placement === 'left',\n          'drawer--contained': this.contained,\n          'drawer--fixed': !this.contained,\n          'drawer--has-footer': this.hasFooter,\n        }}\n        onKeyDown={this.handleKeyDown}\n        onTransitionEnd={this.handleTransitionEnd}\n      >\n        <div part=\"overlay\" class=\"drawer__overlay\" onClick={this.handleOverlayClick} tabIndex={-1} />\n\n        <div\n          ref={(el) => (this.panel = el)}\n          part=\"panel\"\n          class=\"drawer__panel\"\n          role=\"dialog\"\n          aria-modal=\"true\"\n          aria-hidden={this.open ? 'false' : 'true'}\n          aria-label={this.noHeader ? this.label : null}\n          aria-labelledby={!this.noHeader ? `${this.componentId}-title` : null}\n          tabIndex={0}\n        >\n          {!this.noHeader && (\n            <header part=\"header\" class=\"drawer__header\">\n              <span part=\"title\" class=\"drawer__title\" id={`${this.componentId}-title`}>\n                <slot name=\"label\">\n                  {/* If there's no label, use an invisible character to prevent the heading from collapsing */}\n                  {this.label || String.fromCharCode(65279)}\n                </slot>\n              </span>\n              <six-icon-button\n                exportparts=\"base:close-button\"\n                class=\"drawer__close\"\n                name=\"x\"\n                onClick={this.handleCloseClick}\n              />\n            </header>\n          )}\n\n          <div part=\"body\" class=\"drawer__body\">\n            <slot />\n          </div>\n\n          <footer part=\"footer\" class=\"drawer__footer\">\n            <slot name=\"footer\" onSlotchange={this.handleSlotChange} />\n          </footer>\n        </div>\n      </div>\n    );\n  }\n}\n","@import 'src/global/component';\n@import 'src/global/mixins/hidden';\n\n/**\n * @prop --size: The preferred size of the drawer. This will be applied to the drawer's width or height depending on its\n *   `placement`. Note that the drawer will shrink to accommodate smaller screens.\n */\n:host {\n  --size: 25rem;\n\n  display: contents;\n}\n\n.drawer {\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  overflow: hidden;\n\n  &:not(.drawer--visible) {\n    @include hidden;\n  }\n}\n\n.drawer--contained {\n  position: absolute;\n  z-index: initial;\n}\n\n.drawer--fixed {\n  position: fixed;\n  z-index: var(--six-z-index-drawer);\n}\n\n.drawer__panel {\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  z-index: 2;\n  max-width: 100%;\n  max-height: 100%;\n  background-color: var(--six-drawer-background-color);\n  color: var(--six-drawer-color);\n  box-shadow: var(--six-shadow-x-large);\n  transition: var(--six-transition-medium) transform;\n  overflow: auto;\n  pointer-events: all;\n\n  &:focus {\n    outline: none;\n  }\n}\n\n.drawer--top .drawer__panel {\n  top: 0;\n  right: auto;\n  bottom: auto;\n  left: 0;\n  width: 100%;\n  height: var(--size);\n  transform: translate(0, -100%);\n}\n\n.drawer--right .drawer__panel {\n  top: 0;\n  right: 0;\n  bottom: auto;\n  left: auto;\n  width: var(--size);\n  height: 100%;\n  transform: translate(100%, 0);\n}\n\n.drawer--bottom .drawer__panel {\n  top: auto;\n  right: auto;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: var(--size);\n  transform: translate(0, 100%);\n}\n\n.drawer--left .drawer__panel {\n  top: 0;\n  right: auto;\n  bottom: auto;\n  left: 0;\n  width: var(--size);\n  height: 100%;\n  transform: translate(-100%, 0);\n}\n\n.drawer--open .drawer__panel {\n  // don't use translate here or it will cause problems with popovers inside the drawer e.g. dropdown, select etc.\n  transform: none;\n}\n\n.drawer__header {\n  display: flex;\n}\n\n.drawer__title {\n  flex: 1 1 auto;\n  font-size: var(--six-font-size-large);\n  line-height: var(--six-line-height-dense);\n  padding: var(--six-spacing-large);\n}\n\n.drawer__close {\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  font-size: var(--six-font-size-x-large);\n  padding: 0 var(--six-spacing-large);\n}\n\n.drawer__body {\n  flex: 1 1 auto;\n  padding: var(--six-spacing-large);\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.drawer__footer {\n  text-align: right;\n  padding: var(--six-spacing-large);\n\n  ::slotted(six-button:not(:last-of-type)) {\n    margin-right: var(--six-spacing-x-small);\n  }\n}\n\n.drawer:not(.drawer--has-footer) .drawer__footer {\n  display: none;\n}\n\n.drawer__overlay {\n  display: block;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: var(--six-overlay-background-color);\n  opacity: 0;\n  transition: var(--six-transition-medium) opacity;\n  pointer-events: all;\n}\n\n.drawer--contained .drawer__overlay {\n  position: absolute;\n}\n\n.drawer--open .drawer__overlay {\n  opacity: 0.4;\n}\n","//\n// Given a slot, this function iterates over all of its assigned text nodes and returns the concatenated text as a\n// string. This is useful because we can't use slot.textContent as an alternative.\n//\nexport function getTextContent(slot?: HTMLSlotElement): string {\n  const nodes = slot != null ? slot.assignedNodes({ flatten: true }) : [];\n  let text = '';\n\n  [...nodes].map((node) => {\n    if (node.nodeType === Node.TEXT_NODE) {\n      text += node.textContent;\n    }\n  });\n\n  return text;\n}\n\n//\n// Determines whether an element has a slot. If name is specified, the function will look for a corresponding named\n// slot, otherwise it will look for a \"default\" slot (e.g. a non-empty text node or an element with no slot attribute).\n//\nexport function hasSlot(el: HTMLElement, name?: string): boolean {\n  // Look for a named slot\n  if (name != null && name !== '') {\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\n  }\n\n  // Look for a default slot\n  return Array.from(el.childNodes).some((node) => {\n    if (node.nodeType === node.TEXT_NODE && node.textContent?.trim() !== '') {\n      return true;\n    }\n\n    if (node.nodeType === node.ELEMENT_NODE) {\n      const el = node as HTMLElement;\n      if (!el.hasAttribute('slot')) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n}\n\nexport const getSlotChildren = <T extends HTMLElement>(el: HTMLElement) =>\n  el.querySelector('slot')?.assignedElements({ flatten: true }) as T[];\n\nexport function getSlot(element: ParentNode | null | undefined, slotName: string): HTMLElement | null {\n  if (element == null) return null;\n  return element.querySelector(`[slot=\"${slotName}\"]`);\n}\n"],"names":["isPreventScrollSupported","supported","element","document","createElement","focus","preventScroll","activeModals","Modal","options","this","handleFocusIn","bind","push","addEventListener","filter","modal","removeEventListener","length","event","target","tagName","toLowerCase","isActive","closest","onFocusOut","locks","Set","lockBodyScrolling","lockingEl","add","body","classList","unlockBodyScrolling","delete","size","remove","scrollIntoView","container","direction","behavior","offset","parent","top","Math","round","getBoundingClientRect","left","getOffset","offsetTop","scrollTop","offsetLeft","scrollLeft","minX","maxX","offsetWidth","minY","maxY","offsetHeight","scrollTo","clientWidth","clientHeight","hasPreventScroll","id","SixDrawer","componentId","willShow","willHide","handleCloseClick","hide","handleKeyDown","key","handleOverlayClick","sixOverlayDismiss","emit","defaultPrevented","handleSlotChange","hasFooter","hasSlot","host","handleTransitionEnd","propertyName","contains","resetTransitionVariables","open","show","contained","panel","drawer","sixShow","isVisible","activate","requestAnimationFrame","sixInitialFocus","once","sixHide","deactivate","sixAfterShow","sixAfterHide","h","ref","el","part","class","placement","onKeyDown","onTransitionEnd","onClick","tabIndex","role","noHeader","label","name","String","fromCharCode","exportparts","onSlotchange","getTextContent","slot","nodes","assignedNodes","flatten","text","map","node","nodeType","Node","TEXT_NODE","textContent","querySelector","Array","from","childNodes","some","trim","ELEMENT_NODE","hasAttribute","getSlotChildren","assignedElements","getSlot","slotName"],"sourceRoot":""}