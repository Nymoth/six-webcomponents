{"version":3,"file":"static/js/8992.9652fa85.chunk.js","mappings":"6PAGMA,EAAaC,OAAOC,OAAOC,SAASC,cAAc,OAAQ,CAAEC,UAAW,oBAsBhEC,EAAQ,W,uQA2HX,KAAAC,iBAAmB,WACzB,EAAKC,M,EAGC,KAAAC,gBAAkB,WACxB,EAAKC,iB,EAGC,KAAAC,oBAAsB,SAACC,GAC7B,IAAMC,EAASD,EAAMC,OAGM,YAAvBD,EAAME,cAA8BD,EAAOE,UAAUC,SAAS,WAChE,EAAKC,UAAY,EAAKC,KACtB,EAAKA,KAAO,EAAKC,aAAaC,OAAS,EAAKC,aAAaD,O,kBApIxC,E,WAG0B,E,eAGX,E,UAGmD,U,cAMpEE,G,gDAGnB,WACEC,KAAKL,KAAOK,KAAKC,OAASD,KAAKf,M,GAChC,kCAGD,WACEe,KAAKb,iB,GACN,+BAcD,WAEMa,KAAKL,MACPK,KAAKC,M,8DAMT,kGAEMD,KAAKN,UAAW,CAAF,gDAIiB,IAAnBM,KAAKE,QAAQL,OACjBM,iBAAkB,CAAF,eACR,OAAlBH,KAAKL,MAAO,EAAM,0BAIpBK,KAAKN,WAAY,EACjBM,KAAKL,MAAO,EAERK,KAAKI,SAAWL,MAClBC,KAAKK,gBAAkBC,OAAOC,YAAW,kBAAM,EAAKtB,MAAM,GAAEe,KAAKI,WAClE,gDACF,kD,+DAID,sFAEOJ,KAAKN,UAAW,CAAF,gDAIgB,IAAnBM,KAAKQ,QAAQX,OACjBM,iBAAkB,CAAF,eACT,OAAjBH,KAAKL,MAAO,EAAK,0BAInBc,aAAaT,KAAKK,iBAClBL,KAAKN,WAAY,EACjBM,KAAKL,MAAO,EAAM,gDACnB,kD,gEAQD,uHACS,IAAIe,SAAc,SAACC,GACnBlC,EAAWmC,eACdhC,SAASiC,KAAKC,OAAOrC,GAGvBA,EAAWqC,OAAO,EAAKC,MACvBC,uBAAsB,kBAAM,EAAKf,MAAM,IAEvC,EAAKc,KAAKE,iBACR,wBACA,WACE,EAAKF,KAAKG,SACVP,IAG8C,OAA1ClC,EAAW0C,cAAc,cAC3B1C,EAAWyC,Q,GAGf,CAAEE,MAAM,G,KAEV,2CACH,kD,IAAA,6BAoBO,WAAe,WACrBX,aAAaT,KAAKK,iBACdL,KAAKL,MAAQK,KAAKI,SAAWL,MAC/BC,KAAKK,gBAAkBC,OAAOC,YAAW,kBAAM,EAAKtB,MAAM,GAAEe,KAAKI,U,GAEpE,oBAED,WACE,OACEiB,EAAAA,EAAAA,GAAAA,MAAAA,CACEC,KAAK,OACLC,MAAO,CACLC,OAAO,EACP,cAAexB,KAAKL,KACpB,iBAAkBK,KAAKN,UACvB,kBAAmBM,KAAKyB,SACxB,iBAAgC,YAAdzB,KAAK0B,KACvB,iBAAgC,YAAd1B,KAAK0B,KACvB,cAA6B,SAAd1B,KAAK0B,KACpB,iBAAgC,YAAd1B,KAAK0B,KACvB,gBAA+B,WAAd1B,KAAK0B,MAExBC,KAAK,QAAO,YACF,YAAW,cACT,OAAM,cACL3B,KAAKL,KAAO,QAAU,OACnCiC,YAAa5B,KAAKd,gBAClB2C,gBAAiB7B,KAAKZ,sBAEtBiC,EAAAA,EAAAA,GAAAA,OAAAA,CAAMC,KAAK,OAAOC,MAAM,gBACtBF,EAAAA,EAAAA,GAAAA,OAAAA,CAAMS,KAAK,WAGbT,EAAAA,EAAAA,GAAAA,OAAAA,CAAMC,KAAK,UAAUC,MAAM,mBACzBF,EAAAA,EAAAA,GAAAA,OAAAA,OAGDrB,KAAKyB,WACJJ,EAAAA,EAAAA,GAAAA,OAAAA,CAAME,MAAM,iBACVF,EAAAA,EAAAA,GAAAA,kBAAAA,CACES,KAAK,QACLC,YAAY,oBACZC,QAAShC,KAAKhB,oB,GAMzB,2B,iIA7LkB,G,QCzBD,u1D","sources":["../../../libraries/ui-library/dist/esm/src/components/six-alert/six-alert.tsx","../../../libraries/ui-library/dist/esm/src/components/six-alert/six-alert.scss?tag=six-alert&encapsulation=shadow"],"sourcesContent":["import { Component, Element, Event, EventEmitter, Method, Prop, State, Watch, h } from '@stencil/core';\nimport { EmptyPayload } from '../../utils/types';\n\nconst toastStack = Object.assign(document.createElement('div'), { className: 'six-toast-stack' });\n\n/**\n * @since 1.0\n * @status stable\n *\n * Forked from https://github.com/shoelace-style/shoelace version v2.0.0-beta27.\n *\n * @slot - The alert's content.\n * @slot icon - An icon to show in the alert.\n *\n * @part base - The component's base wrapper.\n * @part icon - The container that wraps the alert icon.\n * @part message - The alert message.\n * @part close-button - The close button.\n */\n\n@Component({\n  tag: 'six-alert',\n  styleUrl: 'six-alert.scss',\n  shadow: true,\n})\nexport class SixAlert {\n  private autoHideTimeout?: number;\n\n  @Element() host!: HTMLSixAlertElement;\n\n  @State() isVisible = false;\n\n  /** Indicates whether or not the alert is open. You can use this in lieu of the show/hide methods. */\n  @Prop({ mutable: true, reflect: true }) open = false;\n\n  /** Set to true to make the alert closable. */\n  @Prop({ reflect: true }) closable = false;\n\n  /** The type of alert. */\n  @Prop({ reflect: true }) type: 'primary' | 'success' | 'info' | 'warning' | 'danger' = 'primary';\n\n  /**\n   * The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with the\n   * alert before it closes (e.g. moves the mouse over it), the timer will restart.\n   */\n  @Prop() duration = Infinity;\n\n  @Watch('open')\n  handleOpenChange() {\n    this.open ? this.show() : this.hide();\n  }\n\n  @Watch('duration')\n  handleDurationChange() {\n    this.restartAutoHide();\n  }\n\n  /** Emitted when the alert opens. Calling `event.preventDefault()` will prevent it from being opened. */\n  @Event({ eventName: 'six-alert-show' }) sixShow!: EventEmitter<EmptyPayload>;\n\n  /** Emitted after the alert opens and all transitions are complete. */\n  @Event({ eventName: 'six-alert-after-show' }) sixAfterShow!: EventEmitter<EmptyPayload>;\n\n  /** Emitted when the alert closes. Calling `event.preventDefault()` will prevent it from being closed. */\n  @Event({ eventName: 'six-alert-hide' }) sixHide!: EventEmitter<EmptyPayload>;\n\n  /** Emitted after the alert closes and all transitions are complete. */\n  @Event({ eventName: 'six-alert-after-hide' }) sixAfterHide!: EventEmitter<EmptyPayload>;\n\n  componentWillLoad() {\n    // Show on init if open\n    if (this.open) {\n      this.show();\n    }\n  }\n\n  /** Shows the alert. */\n  @Method()\n  async show() {\n    // Prevent subsequent calls to the method, whether manually or triggered by the `open` watcher\n    if (this.isVisible) {\n      return;\n    }\n\n    const sixShow = this.sixShow.emit();\n    if (sixShow.defaultPrevented) {\n      this.open = false;\n      return;\n    }\n\n    this.isVisible = true;\n    this.open = true;\n\n    if (this.duration < Infinity) {\n      this.autoHideTimeout = window.setTimeout(() => this.hide(), this.duration);\n    }\n  }\n\n  /** Hides the alert */\n  @Method()\n  async hide() {\n    // Prevent subsequent calls to the method, whether manually or triggered by the `open` watcher\n    if (!this.isVisible) {\n      return;\n    }\n\n    const sixHide = this.sixHide.emit();\n    if (sixHide.defaultPrevented) {\n      this.open = true;\n      return;\n    }\n\n    clearTimeout(this.autoHideTimeout);\n    this.isVisible = false;\n    this.open = false;\n  }\n\n  /**\n   * Displays the alert as a toast notification. This will move the alert out of its position in the DOM and, when\n   * dismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by\n   * calling this method again. The returned promise will resolve after the alert is hidden.\n   */\n  @Method()\n  async toast() {\n    return new Promise<void>((resolve) => {\n      if (!toastStack.parentElement) {\n        document.body.append(toastStack);\n      }\n\n      toastStack.append(this.host);\n      requestAnimationFrame(() => this.show());\n\n      this.host.addEventListener(\n        'six-alert-after-hide',\n        () => {\n          this.host.remove();\n          resolve();\n\n          // Remove the toast stack from the DOM when there are no more alerts\n          if (toastStack.querySelector('six-alert') === null) {\n            toastStack.remove();\n          }\n        },\n        { once: true }\n      );\n    });\n  }\n\n  private handleCloseClick = () => {\n    this.hide();\n  };\n\n  private handleMouseMove = () => {\n    this.restartAutoHide();\n  };\n\n  private handleTransitionEnd = (event: TransitionEvent) => {\n    const target = event.target as HTMLElement;\n\n    // Ensure we only emit one event when the target element is no longer visible\n    if (event.propertyName === 'opacity' && target.classList.contains('alert')) {\n      this.isVisible = this.open;\n      this.open ? this.sixAfterShow.emit() : this.sixAfterHide.emit();\n    }\n  };\n\n  private restartAutoHide() {\n    clearTimeout(this.autoHideTimeout);\n    if (this.open && this.duration < Infinity) {\n      this.autoHideTimeout = window.setTimeout(() => this.hide(), this.duration);\n    }\n  }\n\n  render() {\n    return (\n      <div\n        part=\"base\"\n        class={{\n          alert: true,\n          'alert--open': this.open,\n          'alert--visible': this.isVisible,\n          'alert--closable': this.closable,\n          'alert--primary': this.type === 'primary',\n          'alert--success': this.type === 'success',\n          'alert--info': this.type === 'info',\n          'alert--warning': this.type === 'warning',\n          'alert--danger': this.type === 'danger',\n        }}\n        role=\"alert\"\n        aria-live=\"assertive\"\n        aria-atomic=\"true\"\n        aria-hidden={this.open ? 'false' : 'true'}\n        onMouseMove={this.handleMouseMove}\n        onTransitionEnd={this.handleTransitionEnd}\n      >\n        <span part=\"icon\" class=\"alert__icon\">\n          <slot name=\"icon\" />\n        </span>\n\n        <span part=\"message\" class=\"alert__message\">\n          <slot />\n        </span>\n\n        {this.closable && (\n          <span class=\"alert__close\">\n            <six-icon-button\n              name=\"clear\"\n              exportparts=\"base:close-button\"\n              onClick={this.handleCloseClick}\n            ></six-icon-button>\n          </span>\n        )}\n      </div>\n    );\n  }\n}\n","@import 'src/global/component';\n@import 'src/global/mixins/hidden';\n\n/**\n * @prop --box-shadow: The alert's box shadow.\n */\n:host {\n  display: contents;\n\n  // For better DX, we'll reset the margin here so the base part can inherit it\n  margin: 0;\n}\n\n.alert {\n  position: relative;\n  display: flex;\n  align-items: stretch;\n  background-color: var(--six-color-white);\n  border: solid 1px var(--six-color-web-rock-200);\n  border-top-width: 3px;\n  border-radius: var(--six-border-radius-medium);\n  box-shadow: var(--box-shadow);\n  font-family: var(--six-font-sans);\n  font-size: var(--six-font-size-small);\n  font-weight: var(--six-font-weight-normal);\n  line-height: 1.6;\n  color: var(--six-color-web-rock-700);\n  opacity: 0;\n  transform: scale(0.9);\n  transition: var(--six-transition-medium) opacity ease, var(--six-transition-medium) transform ease;\n  margin: inherit;\n\n  &:not(.alert--visible) {\n    @include hidden;\n  }\n}\n\n.alert--open {\n  opacity: 1;\n  transform: none;\n}\n\n.alert__icon {\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  font-size: var(--six-font-size-large);\n\n  ::slotted(*) {\n    margin-left: var(--six-spacing-large);\n  }\n}\n\n.alert--primary {\n  border-top-color: var(--six-color-web-rock-900);\n\n  .alert__icon {\n    color: var(--six-color-web-rock-900);\n  }\n}\n\n.alert--success {\n  border-top-color: var(--six-color-success-600);\n\n  .alert__icon {\n    color: var(--six-color-success-600);\n  }\n}\n\n.alert--info {\n  border-top-color: var(--six-color-action-500);\n\n  .alert__icon {\n    color: var(--six-color-action-500);\n  }\n}\n\n.alert--warning {\n  border-top-color: var(--six-color-warning-800);\n\n  .alert__icon {\n    color: var(--six-color-warning-800);\n  }\n}\n\n.alert--danger {\n  border-top-color: var(--six-color-danger-900);\n\n  .alert__icon {\n    color: var(--six-color-danger-900);\n  }\n}\n\n.alert__message {\n  flex: 1 1 auto;\n  padding: var(--six-spacing-large);\n  overflow: hidden;\n}\n\n.alert__close {\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  font-size: var(--six-font-size-large);\n  padding-right: var(--six-spacing-medium);\n}\n"],"names":["toastStack","Object","assign","document","createElement","className","SixAlert","handleCloseClick","hide","handleMouseMove","restartAutoHide","handleTransitionEnd","event","target","propertyName","classList","contains","isVisible","open","sixAfterShow","emit","sixAfterHide","Infinity","this","show","sixShow","defaultPrevented","duration","autoHideTimeout","window","setTimeout","sixHide","clearTimeout","Promise","resolve","parentElement","body","append","host","requestAnimationFrame","addEventListener","remove","querySelector","once","h","part","class","alert","closable","type","role","onMouseMove","onTransitionEnd","name","exportparts","onClick"],"sourceRoot":""}