{"version":3,"sources":["webpack:///./node_modules/@six/ui-library/dist/esm/six-radio.entry.js"],"names":["sixRadioCss","id","SixRadio","hostRef","this","sixBlur","sixChange","sixFocus","inputId","labelId","hasFocus","disabled","checked","invalid","defaultState","getSiblingRadios","map","radio","input","emit","handleClick","bind","handleBlur","handleFocus","handleKeyDown","handleMouseDown","options","focus","blur","reportValidity","validity","valid","message","setCustomValidity","checkValidity","form","host","closest","document","body","name","querySelectorAll","filter","getAllRadios","event","includes","key","radios","incr","index","indexOf","length","setFocus","preventDefault","part","class","htmlFor","onKeyDown","onMouseDown","viewBox","stroke","fill","cx","cy","r","ref","el","type","value","role","onClick","onBlur","onFocus","style"],"mappings":"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","file":"js/chunk-2d213934.a51ffb3e.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-a2605a62.js';\n\nconst sixRadioCss = \":host{position:relative;box-sizing:border-box}:host *,:host *:before,:host *:after{box-sizing:inherit}:host{display:inline-block}.radio{display:inline-flex;align-items:center;font-family:var(--six-font-family);font-size:var(--six-input-font-size-medium);font-weight:var(--six-input-font-weight);color:var(--six-input-color);vertical-align:middle;cursor:pointer}.radio__icon{display:inline-flex;width:var(--six-selection-control-toggle-size);height:var(--six-selection-control-toggle-size)}.radio__icon svg{width:100%;height:100%}.radio__control{position:relative;display:inline-flex;align-items:center;justify-content:center;width:var(--six-selection-control-toggle-size);height:var(--six-selection-control-toggle-size);border:solid var(--six-border-width) var(--six-input-border-color);border-radius:50%;background-color:var(--six-input-background-color);color:transparent;transition:var(--six-transition-fast) border-color, var(--six-transition-fast) background-color, var(--six-transition-fast) color, var(--six-transition-fast) box-shadow}.radio__control input[type=radio]{position:absolute;opacity:0;padding:0;margin:0;pointer-events:none}.radio:not(.radio--checked):not(.radio--disabled) .radio__control:hover{border-color:var(--six-input-border-color-hover)}.radio--checked .radio__control{color:var(--six-selection-control-color);border-color:var(--six-selection-control-color)}.radio.radio--checked:not(.radio--disabled) .radio__control:hover{color:var(--six-input-border-color-focus);border-color:var(--six-input-border-color-focus)}.radio--disabled{cursor:not-allowed;color:var(--six-input-color-disabled)}.radio--disabled .radio__control{border-color:var(--six-input-border-color-disabled)}.radio--disabled.radio--checked .radio__control{color:var(--six-selection-control-color-disabled)}.radio__label{line-height:var(--six-selection-control-toggle-size);margin-left:0.5em;user-select:none}\";\n\nlet id = 0;\r\nlet SixRadio = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.sixBlur = createEvent(this, \"six-radio-blur\", 7);\r\n    this.sixChange = createEvent(this, \"six-radio-change\", 7);\r\n    this.sixFocus = createEvent(this, \"six-radio-focus\", 7);\r\n    this.inputId = `radio-${++id}`;\r\n    this.labelId = `radio-label-${id}`;\r\n    this.hasFocus = false;\r\n    /** Set to true to disable the radio. */\r\n    this.disabled = false;\r\n    /** Set to true to draw the radio in a checked state. */\r\n    this.checked = false;\r\n    /**\r\n     * This will be true when the control is in an invalid state. Validity in range inputs is determined by the message\r\n     * provided by the `setCustomValidity` method.\r\n     */\r\n    this.invalid = false;\r\n    /** default state whether the radio button should be checked or not when resetting */\r\n    this.defaultState = false;\r\n  }\r\n  handleCheckedChange() {\r\n    if (this.checked) {\r\n      this.getSiblingRadios().map((radio) => (radio.checked = false));\r\n    }\r\n    if (this.input) {\r\n      this.input.checked = this.checked;\r\n      this.sixChange.emit();\r\n    }\r\n  }\r\n  connectedCallback() {\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n    this.handleFocus = this.handleFocus.bind(this);\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n  }\r\n  componentWillLoad() {\r\n    this.defaultState = this.checked;\r\n  }\r\n  /** Sets focus on the radio. */\r\n  async setFocus(options) {\r\n    this.input.focus(options);\r\n  }\r\n  /** Removes focus from the radio. */\r\n  async removeFocus() {\r\n    this.input.blur();\r\n  }\r\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\r\n  async reportValidity() {\r\n    return this.input.reportValidity();\r\n  }\r\n  /** Checks for validity. */\r\n  async checkValidity() {\r\n    return this.input.validity.valid;\r\n  }\r\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\r\n  async setCustomValidity(message) {\r\n    this.input.setCustomValidity(message);\r\n    this.invalid = !this.input.checkValidity();\r\n  }\r\n  /** Resets the formcontrol */\r\n  async reset() {\r\n    this.checked = this.defaultState;\r\n    this.input.setCustomValidity('');\r\n    this.invalid = false;\r\n  }\r\n  getAllRadios() {\r\n    const form = this.host.closest('six-form, form') || document.body;\r\n    if (!this.name)\r\n      return [];\r\n    return [...form.querySelectorAll('six-radio')].filter((radio) => radio.name === this.name);\r\n  }\r\n  getSiblingRadios() {\r\n    return this.getAllRadios().filter((radio) => radio !== this.host);\r\n  }\r\n  handleClick() {\r\n    this.checked = this.input.checked;\r\n  }\r\n  handleBlur() {\r\n    this.hasFocus = false;\r\n    this.sixBlur.emit();\r\n  }\r\n  handleFocus() {\r\n    this.hasFocus = true;\r\n    this.sixFocus.emit();\r\n  }\r\n  handleKeyDown(event) {\r\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\r\n      const radios = this.getAllRadios().filter((radio) => !radio.disabled);\r\n      const incr = ['ArrowUp', 'ArrowLeft'].includes(event.key) ? -1 : 1;\r\n      let index = radios.indexOf(this.host) + incr;\r\n      if (index < 0)\r\n        index = radios.length - 1;\r\n      if (index > radios.length - 1)\r\n        index = 0;\r\n      this.getAllRadios().map((radio) => (radio.checked = false));\r\n      radios[index].setFocus();\r\n      radios[index].checked = true;\r\n      event.preventDefault();\r\n    }\r\n  }\r\n  handleMouseDown(event) {\r\n    // Prevent clicks on the label from briefly blurring the input\r\n    event.preventDefault();\r\n    this.input.focus();\r\n  }\r\n  render() {\r\n    return (h(\"label\", { part: \"base\", class: {\r\n        radio: true,\r\n        'radio--checked': this.checked,\r\n        'radio--disabled': this.disabled,\r\n        'radio--focused': this.hasFocus,\r\n      }, htmlFor: this.inputId, onKeyDown: this.handleKeyDown, onMouseDown: this.handleMouseDown }, h(\"span\", { part: \"control\", class: \"radio__control\" }, h(\"span\", { part: \"checked-icon\", class: \"radio__icon\" }, h(\"svg\", { viewBox: \"0 0 16 16\" }, h(\"g\", { stroke: \"none\", \"stroke-width\": \"1\", fill: \"none\", \"fill-rule\": \"evenodd\" }, h(\"g\", { fill: \"currentColor\" }, h(\"circle\", { cx: \"8\", cy: \"8\", r: \"5\" }))))), h(\"input\", { ref: (el) => (this.input = el), id: this.inputId, type: \"radio\", name: this.name, value: this.value, checked: this.checked, disabled: this.disabled, role: \"radio\", \"aria-checked\": this.checked ? 'true' : 'false', \"aria-labelledby\": this.labelId, onClick: this.handleClick, onBlur: this.handleBlur, onFocus: this.handleFocus })), h(\"span\", { part: \"label\", id: this.labelId, class: \"radio__label\" }, h(\"slot\", null))));\r\n  }\r\n  get host() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"checked\": [\"handleCheckedChange\"]\r\n  }; }\r\n};\r\nSixRadio.style = sixRadioCss;\n\nexport { SixRadio as six_radio };\n"],"sourceRoot":""}