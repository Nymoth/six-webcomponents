{"version":3,"sources":["webpack:///./node_modules/@six/ui-library/dist/esm/six-switch.entry.js"],"names":["sixSwitchCss","id","SixSwitch","hostRef","this","sixBlur","sixChange","sixFocus","switchId","labelId","hasFocus","disabled","required","checked","invalid","defaultValue","input","emit","handleClick","bind","handleBlur","handleFocus","handleKeyDown","handleMouseDown","value","options","focus","blur","reportValidity","validity","valid","message","setCustomValidity","checkValidity","event","key","preventDefault","part","htmlFor","class","switch","onMouseDown","ref","el","type","name","role","onClick","onBlur","onFocus","onKeyDown","style"],"mappings":"kHAAA,kEAEA,MAAMA,EAAe,ivEAErB,IAAIC,EAAK,EACLC,EAAY,MACd,YAAYC,GACV,eAAiBC,KAAMD,GACvBC,KAAKC,QAAU,eAAYD,KAAM,kBAAmB,GACpDA,KAAKE,UAAY,eAAYF,KAAM,oBAAqB,GACxDA,KAAKG,SAAW,eAAYH,KAAM,mBAAoB,GACtDA,KAAKI,SAAW,aAAYP,EAC5BG,KAAKK,QAAU,gBAAgBR,EAC/BG,KAAKM,UAAW,EAEhBN,KAAKO,UAAW,EAEhBP,KAAKQ,UAAW,EAEhBR,KAAKS,SAAU,EAEfT,KAAKU,SAAU,EAEfV,KAAKW,aAAe,GAEtB,sBACEX,KAAKY,MAAMH,QAAUT,KAAKS,QAC1BT,KAAKE,UAAUW,KAAKb,KAAKS,SAE3B,oBACET,KAAKc,YAAcd,KAAKc,YAAYC,KAAKf,MACzCA,KAAKgB,WAAahB,KAAKgB,WAAWD,KAAKf,MACvCA,KAAKiB,YAAcjB,KAAKiB,YAAYF,KAAKf,MACzCA,KAAKkB,cAAgBlB,KAAKkB,cAAcH,KAAKf,MAC7CA,KAAKmB,gBAAkBnB,KAAKmB,gBAAgBJ,KAAKf,MAEnD,oBACEA,KAAKW,aAAeX,KAAKoB,MAG3B,eAAeC,GACbrB,KAAKY,MAAMU,MAAMD,GAGnB,oBACErB,KAAKY,MAAMW,OAGb,uBACE,OAAOvB,KAAKY,MAAMY,iBAGpB,sBACE,OAAOxB,KAAKY,MAAMa,SAASC,MAG7B,wBAAwBC,GACtB3B,KAAKY,MAAMgB,kBAAkBD,GAC7B3B,KAAKU,SAAWV,KAAKY,MAAMiB,gBAG7B,cACE7B,KAAKoB,MAAQpB,KAAKW,aAClBX,KAAKY,MAAMgB,kBAAkB,IAC7B5B,KAAKU,SAAU,EAEjB,cACEV,KAAKS,QAAUT,KAAKY,MAAMH,QAE5B,aACET,KAAKM,UAAW,EAChBN,KAAKC,QAAQY,KAAKb,KAAKS,SAEzB,cACET,KAAKM,UAAW,EAChBN,KAAKG,SAASU,OAEhB,cAAciB,GACM,cAAdA,EAAMC,MACRD,EAAME,iBACNhC,KAAKS,SAAU,GAEC,eAAdqB,EAAMC,MACRD,EAAME,iBACNhC,KAAKS,SAAU,GAGnB,gBAAgBqB,GAEdA,EAAME,iBACNhC,KAAKY,MAAMU,QAEb,SACE,OAAQ,cAAD,CAAG,QAAS,CAAEW,KAAM,OAAQC,QAASlC,KAAKI,SAAU+B,MAAO,CAC9DC,QAAQ,EACR,kBAAmBpC,KAAKS,QACxB,mBAAoBT,KAAKO,SACzB,kBAAmBP,KAAKM,UACvB+B,YAAarC,KAAKmB,iBAAmB,eAAE,OAAQ,CAAEc,KAAM,UAAWE,MAAO,mBAAqB,eAAE,OAAQ,CAAEF,KAAM,QAASE,MAAO,kBAAoB,eAAE,QAAS,CAAEG,IAAMC,GAAQvC,KAAKY,MAAQ2B,EAAK1C,GAAIG,KAAKI,SAAUoC,KAAM,WAAYC,KAAMzC,KAAKyC,KAAMrB,MAAOpB,KAAKoB,MAAOX,QAAST,KAAKS,QAASF,SAAUP,KAAKO,SAAUC,SAAUR,KAAKQ,SAAUkC,KAAM,SAAU,eAAgB1C,KAAKS,QAAU,OAAS,QAAS,kBAAmBT,KAAKK,QAASsC,QAAS3C,KAAKc,YAAa8B,OAAQ5C,KAAKgB,WAAY6B,QAAS7C,KAAKiB,YAAa6B,UAAW9C,KAAKkB,iBAAmB,eAAE,OAAQ,CAAEe,KAAM,QAASpC,GAAIG,KAAKK,QAAS8B,MAAO,iBAAmB,eAAE,OAAQ,QAE/nB,sBAAwB,MAAO,CAC7B,QAAW,CAAC,0BAGhBrC,EAAUiD,MAAQnD","file":"js/chunk-2d0f0f56.e02a74b4.js","sourcesContent":["import { r as registerInstance, c as createEvent, h } from './index-a2605a62.js';\n\nconst sixSwitchCss = \":host{position:relative;box-sizing:border-box}:host *,:host *:before,:host *:after{box-sizing:inherit}:host{--height:var(--six-selection-control-toggle-size);--thumb-size:calc(var(--six-selection-control-toggle-size) - 4px);--width:calc(var(--height) * 2);display:inline-block}.switch{display:inline-flex;align-items:center;font-family:var(--six-font-family);font-size:var(--six-input-font-size-medium);font-weight:var(--six-input-font-weight);color:var(--six-input-color);vertical-align:middle;cursor:pointer}.switch__control{position:relative;display:inline-flex;align-items:center;justify-content:center;width:var(--width);height:var(--height);background-color:var(--six-selection-control-color-disabled);border-radius:var(--height);transition:var(--six-transition-fast) border-color, var(--six-transition-fast) background-color}.switch__control .switch__thumb{width:var(--thumb-size);height:var(--thumb-size);background-color:var(--six-input-background-color);border-radius:50%;transform:translateX(calc(var(--width) / -2 + var(--thumb-size) / 2 - (var(--thumb-size) - var(--height)) / 2));transition:var(--six-transition-fast) transform ease, var(--six-transition-fast) background-color, var(--six-transition-fast) border-color, var(--six-transition-fast) box-shadow}.switch__control input[type=checkbox]{position:absolute;opacity:0;padding:0;margin:0;pointer-events:none}.switch:not(.switch--checked):not(.switch--disabled) .switch__control:hover{background-color:var(--six-input-border-color-hover)}.switch--checked .switch__control{background-color:var(--six-selection-control-color)}.switch--checked .switch__control .switch__thumb{background-color:var(--six-color-white);transform:translateX(calc(var(--width) / 2 - var(--thumb-size) / 2 + (var(--thumb-size) - var(--height)) / 2))}.switch.switch--checked:not(.switch--disabled) .switch__control:hover{background-color:var(--six-input-border-color-focus)}.switch--disabled{cursor:not-allowed;color:var(--six-selection-control-color-disabled)}.switch--disabled .switch__control{background-color:var(--six-selection-control-color-disabled)}.switch--disabled.switch--checked .switch__control{background-color:var(--six-selection-control-color-disabled)}.switch__label{line-height:var(--height);margin-left:0.5em;user-select:none}\";\n\nlet id = 0;\r\nlet SixSwitch = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.sixBlur = createEvent(this, \"six-switch-blur\", 7);\r\n    this.sixChange = createEvent(this, \"six-switch-change\", 7);\r\n    this.sixFocus = createEvent(this, \"six-switch-focus\", 7);\r\n    this.switchId = `switch-${++id}`;\r\n    this.labelId = `switch-label-${id}`;\r\n    this.hasFocus = false;\r\n    /** Set to true to disable the switch. */\r\n    this.disabled = false;\r\n    /** Set to true to make the switch a required field. */\r\n    this.required = false;\r\n    /** Set to true to draw the switch in a checked state. */\r\n    this.checked = false;\r\n    /** This will be true when the control is in an invalid state. Validity is determined by the `required` prop. */\r\n    this.invalid = false;\r\n    /** default value the switch will be reverted to when reset is executed */\r\n    this.defaultValue = '';\r\n  }\r\n  handleCheckedChange() {\r\n    this.input.checked = this.checked;\r\n    this.sixChange.emit(this.checked);\r\n  }\r\n  connectedCallback() {\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n    this.handleFocus = this.handleFocus.bind(this);\r\n    this.handleKeyDown = this.handleKeyDown.bind(this);\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n  }\r\n  componentWillLoad() {\r\n    this.defaultValue = this.value;\r\n  }\r\n  /** Sets focus on the switch. */\r\n  async setFocus(options) {\r\n    this.input.focus(options);\r\n  }\r\n  /** Removes focus from the switch. */\r\n  async removeFocus() {\r\n    this.input.blur();\r\n  }\r\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\r\n  async reportValidity() {\r\n    return this.input.reportValidity();\r\n  }\r\n  /** Checks for validity. */\r\n  async checkValidity() {\r\n    return this.input.validity.valid;\r\n  }\r\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\r\n  async setCustomValidity(message) {\r\n    this.input.setCustomValidity(message);\r\n    this.invalid = !this.input.checkValidity();\r\n  }\r\n  /** Resets the formcontrol */\r\n  async reset() {\r\n    this.value = this.defaultValue;\r\n    this.input.setCustomValidity('');\r\n    this.invalid = false;\r\n  }\r\n  handleClick() {\r\n    this.checked = this.input.checked;\r\n  }\r\n  handleBlur() {\r\n    this.hasFocus = false;\r\n    this.sixBlur.emit(this.checked);\r\n  }\r\n  handleFocus() {\r\n    this.hasFocus = true;\r\n    this.sixFocus.emit();\r\n  }\r\n  handleKeyDown(event) {\r\n    if (event.key === 'ArrowLeft') {\r\n      event.preventDefault();\r\n      this.checked = false;\r\n    }\r\n    if (event.key === 'ArrowRight') {\r\n      event.preventDefault();\r\n      this.checked = true;\r\n    }\r\n  }\r\n  handleMouseDown(event) {\r\n    // Prevent clicks on the label from briefly blurring the input\r\n    event.preventDefault();\r\n    this.input.focus();\r\n  }\r\n  render() {\r\n    return (h(\"label\", { part: \"base\", htmlFor: this.switchId, class: {\r\n        switch: true,\r\n        'switch--checked': this.checked,\r\n        'switch--disabled': this.disabled,\r\n        'switch--focused': this.hasFocus,\r\n      }, onMouseDown: this.handleMouseDown }, h(\"span\", { part: \"control\", class: \"switch__control\" }, h(\"span\", { part: \"thumb\", class: \"switch__thumb\" }), h(\"input\", { ref: (el) => (this.input = el), id: this.switchId, type: \"checkbox\", name: this.name, value: this.value, checked: this.checked, disabled: this.disabled, required: this.required, role: \"switch\", \"aria-checked\": this.checked ? 'true' : 'false', \"aria-labelledby\": this.labelId, onClick: this.handleClick, onBlur: this.handleBlur, onFocus: this.handleFocus, onKeyDown: this.handleKeyDown })), h(\"span\", { part: \"label\", id: this.labelId, class: \"switch__label\" }, h(\"slot\", null))));\r\n  }\r\n  static get watchers() { return {\r\n    \"checked\": [\"handleCheckedChange\"]\r\n  }; }\r\n};\r\nSixSwitch.style = sixSwitchCss;\n\nexport { SixSwitch as six_switch };\n"],"sourceRoot":""}