{"version":3,"sources":["../node_modules/@six/ui-library/dist/esm/slot-5253e199.js","../node_modules/@six/ui-library/dist/esm/six-sidebar-item-group.entry.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js"],"names":["getTextContent","slot","nodes","assignedNodes","flatten","text","map","node","nodeType","Node","TEXT_NODE","textContent","hasSlot","el","name","querySelector","Array","from","childNodes","some","trim","ELEMENT_NODE","hasAttribute","fromPairs","acc","k","v","Object","assign","getAvailableSlots","slots","host","values","reduce","getSlotChildren","_a","assignedElements","SixSidebarItemGroup","hostRef","registerInstance","this","hasItems","icon","value","open","provideSlot","summaryIconHasContent","h","onSlotchange","shadowRoot","length","handleSlotChange","bind","parentElement","closest","class","isSubgroup","inline","summaryIcon","hasContent","getElement","style","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable"],"mappings":"mQAKA,SAASA,EAAeC,GACtB,IAAMC,EAAQD,EAAOA,EAAKE,cAAc,CAAEC,SAAS,IAAU,GACzDC,EAAO,GAMX,OALA,YAAIH,GAAOI,KAAI,SAACC,GACVA,EAAKC,WAAaC,KAAKC,YACzBL,GAAQE,EAAKI,gBAGVN,EAMT,SAASO,EAAQC,EAAIC,GAEnB,OAAIA,EAC8C,OAAzCD,EAAGE,cAAH,iBAA2BD,EAA3B,OAGFE,MAAMC,KAAKJ,EAAGK,YAAYC,MAAK,SAACZ,GACrC,GAAIA,EAAKC,WAAaD,EAAKG,WAAyC,KAA5BH,EAAKI,YAAYS,OACvD,OAAO,EAET,GAAIb,EAAKC,WAAaD,EAAKc,eACdd,EACHe,aAAa,QACnB,OAAO,EAGX,OAAO,KAGX,IAAMC,EAAY,SAACC,EAAD,0BAAOC,EAAP,KAAUC,EAAV,YAAkBC,OAAOC,OAAOD,OAAOC,OAAO,GAAIJ,GAAhCG,OAAA,IAAAA,CAAA,GAAyCF,EAAIC,KAC3EG,EAAoB,SAACC,GAAD,OAAW,SAACC,GAAD,OAAUJ,OAAOK,OAAOF,GAC1DxB,KAAI,SAACQ,GAAD,MAAU,CAACA,EAAMF,EAAQmB,EAAMjB,OACnCmB,OAAOV,EAAW,MACfW,EAAkB,SAACrB,GAAS,IAAIsB,EAAI,OAA2C,QAAnCA,EAAKtB,EAAGE,cAAc,eAA4B,IAAPoB,OAAgB,EAASA,EAAGC,iBAAiB,CAAEhC,SAAS,M,mICrCjJiC,EAAmB,WACrB,WAAYC,GAAS,+BACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,UAAW,EAEhBD,KAAK1B,KAAO,GAEZ0B,KAAKE,KAAO,GAEZF,KAAKG,MAAQ,GACbH,KAAKI,MAAO,EACZJ,KAAKK,YAAc,SAAC/B,GAClB,OAAI,EAAKgC,sBACCC,YAAE,MAAO,CAAE9C,KAAMa,GAAQiC,YAAE,OAAQ,CAAEjC,KAAMA,KAE7CiC,YAAE,OAAQ,CAAEjC,KAAMA,EAAMkC,aAAc,WAC1C,EAAKF,sBACH,EAAKf,KAAKkB,WAAWlC,cAArB,qBAAiDD,EAAjD,OAA2DX,gBAAgB+C,OAAS,MAjBzE,qDAqBrB,WACEV,KAAKW,iBAAmBX,KAAKW,iBAAiBC,KAAKZ,QAtBhC,+BAwBrB,WACEA,KAAKW,qBAzBc,8BA2BrB,WACEX,KAAKC,SAAW7B,YAAQ4B,KAAKT,QA5BV,wBA8BrB,WACE,QAASS,KAAKT,KAAKsB,cAAcC,QAAQ,4BA/BtB,oBAiCrB,WACE,OAAQP,YAAE,cAAe,CAAEQ,MAAO,CAC9B,qCAAsCf,KAAKC,SAC3C,mCAAoCD,KAAKgB,cACxCC,QAAQ,EAAMb,KAAMJ,KAAKI,KAAM,eAAgBJ,KAAKkB,YAAaC,WAAYnB,KAAKC,UAAYM,YAAE,MAAO,CAAE9C,KAAM,WAAa8C,YAAE,MAAO,CAAEQ,MAAO,+BAAiCf,KAAKE,MAAQK,YAAE,WAAY,CAAEQ,MAAO,oCAAsCf,KAAKE,MAAOF,KAAK1B,OAAQ0B,KAAKK,YAAY,gBAAiBE,YAAE,OAAQ,SArChT,gBAuCrB,WAAa,OAAOa,YAAWpB,UAvCV,KAyCvBH,EAAoBwB,MA3CW,+c,gCCHhB,SAASC,EAAgBC,EAAKC,EAAKrB,GAYhD,OAXIqB,KAAOD,EACTpC,OAAOsC,eAAeF,EAAKC,EAAK,CAC9BrB,MAAOA,EACPuB,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZL,EAAIC,GAAOrB,EAGNoB,EAZT","file":"static/js/23.ea7caac0.chunk.js","sourcesContent":["//\r\n//\r\n// Given a slot, this function iterates over all of its assigned text nodes and returns the concatenated text as a\r\n// string. This is useful because we can't use slot.textContent as an alternative.\r\n//\r\nfunction getTextContent(slot) {\r\n  const nodes = slot ? slot.assignedNodes({ flatten: true }) : [];\r\n  let text = '';\r\n  [...nodes].map((node) => {\r\n    if (node.nodeType === Node.TEXT_NODE) {\r\n      text += node.textContent;\r\n    }\r\n  });\r\n  return text;\r\n}\r\n//\r\n// Determines whether an element has a slot. If name is specified, the function will look for a corresponding named\r\n// slot, otherwise it will look for a \"default\" slot (e.g. a non-empty text node or an element with no slot attribute).\r\n//\r\nfunction hasSlot(el, name) {\r\n  // Look for a named slot\r\n  if (name) {\r\n    return el.querySelector(`[slot=\"${name}\"]`) !== null;\r\n  }\r\n  // Look for a default slot\r\n  return Array.from(el.childNodes).some((node) => {\r\n    if (node.nodeType === node.TEXT_NODE && node.textContent.trim() !== '') {\r\n      return true;\r\n    }\r\n    if (node.nodeType === node.ELEMENT_NODE) {\r\n      const el = node;\r\n      if (!el.hasAttribute('slot')) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  });\r\n}\r\nconst fromPairs = (acc, [k, v]) => (Object.assign(Object.assign({}, acc), { [k]: v }));\r\nconst getAvailableSlots = (slots) => (host) => Object.values(slots)\r\n  .map((name) => [name, hasSlot(host, name)])\r\n  .reduce(fromPairs, {});\r\nconst getSlotChildren = (el) => { var _a; return (_a = el.querySelector('slot')) === null || _a === void 0 ? void 0 : _a.assignedElements({ flatten: true }); };\n\nexport { getTextContent as a, getSlotChildren as b, getAvailableSlots as g, hasSlot as h };\n","import { r as registerInstance, h, g as getElement } from './index-a2605a62.js';\nimport { h as hasSlot } from './slot-5253e199.js';\n\nconst sixSidebarItemGroupCss = \":host{position:relative;box-sizing:border-box}:host *,:host *:before,:host *:after{box-sizing:inherit}:host{display:block}.six-sidebar-item-group--childless::part(content){padding:0 !important}.six-sidebar-item-group--subgroup::part(header){background-color:transparent !important}.six-sidebar-item-group__header-icon{margin-left:16px;transform:translate(0px, -3px)}.six-sidebar-details__header{display:flex}.six-sidebar-details__header-icon{margin-right:1em}\";\n\nlet SixSidebarItemGroup = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.hasItems = false;\r\n    /** Title of item group */\r\n    this.name = '';\r\n    /** Icon of the group */\r\n    this.icon = '';\r\n    /** A unique value to store in the sidebar item of the group label. This can be used as a way to identify sidebar items when selected. */\r\n    this.value = '';\r\n    this.open = false;\r\n    this.provideSlot = (name) => {\r\n      if (this.summaryIconHasContent) {\r\n        return (h(\"div\", { slot: name }, h(\"slot\", { name: name })));\r\n      }\r\n      return (h(\"slot\", { name: name, onSlotchange: () => {\r\n          this.summaryIconHasContent =\r\n            this.host.shadowRoot.querySelector(`slot[name=\"${name}\"]`).assignedNodes().length > 0;\r\n        } }));\r\n    };\r\n  }\r\n  connectedCallback() {\r\n    this.handleSlotChange = this.handleSlotChange.bind(this);\r\n  }\r\n  componentWillLoad() {\r\n    this.handleSlotChange();\r\n  }\r\n  handleSlotChange() {\r\n    this.hasItems = hasSlot(this.host);\r\n  }\r\n  isSubgroup() {\r\n    return !!this.host.parentElement.closest('six-sidebar-item-group');\r\n  }\r\n  render() {\r\n    return (h(\"six-details\", { class: {\r\n        'six-sidebar-item-group--childless': !this.hasItems,\r\n        'six-sidebar-item-group--subgroup': this.isSubgroup(),\r\n      }, inline: true, open: this.open, \"summary-icon\": this.summaryIcon, hasContent: this.hasItems }, h(\"div\", { slot: \"summary\" }, h(\"div\", { class: \"six-sidebar-details__header\" }, this.icon && h(\"six-icon\", { class: \"six-sidebar-details__header-icon\" }, this.icon), this.name)), this.provideSlot('summary-icon'), h(\"slot\", null)));\r\n  }\r\n  get host() { return getElement(this); }\r\n};\r\nSixSidebarItemGroup.style = sixSidebarItemGroupCss;\n\nexport { SixSidebarItemGroup as six_sidebar_item_group };\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}"],"sourceRoot":""}